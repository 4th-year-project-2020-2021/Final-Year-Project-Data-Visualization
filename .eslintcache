[{"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\index.js":"1","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js":"2","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js":"3","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js":"4","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js":"5","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js":"6","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Search.js":"7","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js":"8","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js":"9","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js":"10","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js":"11","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js":"12","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js":"13","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js":"14","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js":"15","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js":"16","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js":"17","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js":"18"},{"size":296,"mtime":1611515551272,"results":"19","hashOfConfig":"20"},{"size":603,"mtime":1611574091369,"results":"21","hashOfConfig":"20"},{"size":944,"mtime":1611574091369,"results":"22","hashOfConfig":"20"},{"size":502,"mtime":1611429625646,"results":"23","hashOfConfig":"20"},{"size":1587,"mtime":1611574091374,"results":"24","hashOfConfig":"20"},{"size":1982,"mtime":1611574091369,"results":"25","hashOfConfig":"20"},{"size":28,"mtime":1611429625646,"results":"26","hashOfConfig":"20"},{"size":26,"mtime":1611429625646,"results":"27","hashOfConfig":"20"},{"size":30,"mtime":1611429625646,"results":"28","hashOfConfig":"20"},{"size":236,"mtime":1611574091374,"results":"29","hashOfConfig":"20"},{"size":2959,"mtime":1611574091374,"results":"30","hashOfConfig":"20"},{"size":692,"mtime":1611502223990,"results":"31","hashOfConfig":"20"},{"size":1068,"mtime":1611429625646,"results":"32","hashOfConfig":"20"},{"size":5803,"mtime":1611592246947,"results":"33","hashOfConfig":"20"},{"size":865,"mtime":1611429625646,"results":"34","hashOfConfig":"20"},{"size":7732,"mtime":1611502223986,"results":"35","hashOfConfig":"20"},{"size":583,"mtime":1611429625646,"results":"36","hashOfConfig":"20"},{"size":4126,"mtime":1611429625646,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"ktgycr",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\index.js",["86"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Fbase from './Components/Fbase';\r\nimport App from './Components/App';\r\n\r\n// console.log(firebase);\r\n// It's responsible for attaching our react elements to the DOM.\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n",["87","88"],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js",["89"],"import React, {useState} from 'react';\r\nimport {BrowserRouter as Browser, Route, Redirect, Switch} from 'react-router-dom';\r\nimport Home from '../Routes/Home';\r\nimport Covid19 from '../Routes/Covid19';\r\nimport Search from '../Routes/Search';\r\nimport MersAndSars from '../Routes/MersAndSars';\r\nimport Smallpox from '../Routes/Smallpox';\r\nimport Comparison from '../Routes/Comparison';\r\nimport Profile from '../Routes/Profile';\r\nimport Header from './Header';\r\nimport Auth from '../Routes/Auth';\r\n\r\nfunction Router({isLoggedIn}){\r\n    return (\r\n        <Browser>\r\n          <>\r\n            {isLoggedIn && <Header /> }\r\n            <Switch>\r\n              {isLoggedIn ? (\r\n                <>\r\n                   <Route exact path=\"/\">\r\n                     <Home />\r\n                   </Route> \r\n                   <Route path=\"/covid19\" component={Covid19} />\r\n                   <Route path=\"/search\" component={Search} />\r\n                   <Route path=\"/mersandsars\" component={MersAndSars} />\r\n                   <Route path=\"/smallpox\" component={Smallpox} />\r\n                   <Route path=\"/comparison\" component={Comparison} />\r\n                   <Route path=\"/profile\" component={Profile} />\r\n                   <Redirect from=\"*\" to=\"/\" /> \r\n                </>\r\n              ):(\r\n               <> \r\n                <Route exact path=\"/\">\r\n                  <Auth />\r\n                </Route>\r\n                <Redirect from=\"*\" to=\"/\" /> \r\n               </>\r\n              )}\r\n          </Switch>\r\n          </>\r\n        </Browser>\r\n    )\r\n    \r\n}\r\nexport default Router;","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Search.js",["90"],"export default ()=>\"Search\";","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js",["91"],"export default ()=>\"Home\";","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js",["92"],"export default ()=>\"Smallpox\";","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js",["93"],"import { authService } from 'Components/Fbase';\r\nimport React from 'react';\r\n\r\nexport default () => {\r\n\r\n    const onLogOutClick = () => authService.signOut();\r\n     \r\n    return <><button onClick={onLogOutClick}>Log Out</button></>;\r\n}","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js",["94","95"],"import { authService, firebaseInstance } from 'Components/Fbase';\r\nimport React, {useState} from 'react';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target: { name, value},\r\n        } = event;\r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }else{\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }\r\n            console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount(prev => !prev);\r\n    const onSocialClick = async (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target:{name}\r\n        } = event;\r\n\r\n        let provider;\r\n        if(name === \"google\"){\r\n            // Creates the provider object\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name == \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input \r\n                    name=\"email\" \r\n                    type=\"text\" \r\n                    placeholder=\"Email\" \r\n                    required \r\n                    value={email} \r\n                    onChange={onChange} \r\n                />\r\n                <input \r\n                    name=\"password\"\r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password} \r\n                    onChange={onChange} \r\n                />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\" } />\r\n                {error}\r\n            </form>\r\n            <span onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</span>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Auth;\r\n   ","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js",["96","97"],"import React, { useEffect, useState } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"axios\"\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Form from 'react-bootstrap/Form'\r\nimport GoogleMapReact from 'google-map-react';\r\nimport {Map} from 'google-maps-react';\r\n\r\n// Adapted from \r\n// Styling - https://react-bootstrap.github.io/components/cards/\r\n// Styling - https://react-bootstrap.github.io/getting-started/introduction/\r\n// Get API - https://www.npmjs.com/package/axios\r\n// Time formats - https://www.npmjs.com/package/react-moment\r\n// Search bar - https://react-bootstrap.github.io/components/forms/\r\n\r\nfunction Covid19(){\r\n    // Storing data inside array\r\n\r\n    // Top cards\r\n    const[latest, setLatest] = useState([]);\r\n    // Country cards\r\n    const[results, setResults] = useState([]);\r\n    // Search bar\r\n    const[searchCountry, setSearchCountry] = useState(\"\");\r\n        \r\n    // Dealing with two APIs at once\r\n    useEffect(() => {\r\n        axios\r\n            .all([\r\n                // API for cards (cases, deaths, recoveres values) \r\n                axios.get(\"https://corona.lmao.ninja/v2/all\"),\r\n                // API for countrys\r\n                axios.get(\"https://corona.lmao.ninja/v2/countries\")\r\n        ])\r\n        .then(responceArr => {\r\n            setLatest(responceArr[0].data);\r\n            setResults(responceArr[1].data);\r\n        })\r\n        // Return an error (if any)\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n        \r\n    // Getting updated time by converting miliseconds\r\n    const date = new Date(parseInt(latest.updated))\r\n    const lastUpdated = date.toString();\r\n\r\n    // Filter search\r\n    const filterCountry = results.filter(item  =>{\r\n        // If search and country the same -> return info\r\n        return searchCountry !== \"\" ? item.country.includes(searchCountry) : item;\r\n    })\r\n\r\n    // Creating a reusable component for country data\r\n    const countries = filterCountry.map((data, i) => {\r\n        return (\r\n            <Card\r\n            key={i}\r\n                bg=\"dark\"\r\n                text=\"light\"\r\n                className=\"text-center\"\r\n                style={{margin: \"10px\"}}\r\n            >\r\n\r\n            <Card.Img variant= \"top\" src={data.countryInfo.flag} height=\"350px\"/>\r\n            <Card.Body>\r\n                <Card.Title>{data.country}</Card.Title>\r\n                <Card.Text>Cases {data.cases}</Card.Text>\r\n                <Card.Text>Deaths {data.deaths}</Card.Text>\r\n                <Card.Text>Recovered {data.recovered}</Card.Text>\r\n                <Card.Text>Today's Cases {data.todayCases}</Card.Text>\r\n                <Card.Text>Today's Deaths {data.todayDeaths}</Card.Text>\r\n                <Card.Text>Active {data.active}</Card.Text>\r\n                <Card.Text>Critical {data.critical}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n        )\r\n    })\r\n\r\n    // Adapted from https://www.npmjs.com/package/react-columns\r\n    var queries = [{\r\n        columns: 2,\r\n        query: 'min-width: 500px'\r\n    }, {\r\n        columns: 3,\r\n        query: 'min-width: 1000px'\r\n    }];\r\n\r\n    return(\r\n        <div>\r\n            <br/>\r\n            <h3>Live Covid-19 Stats</h3>\r\n            <br/>\r\n\r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyCMOO2VKuGpExDi9NjZ0jAofu5FOGJ4QbE\" }}\r\n                    defaultCenter={{lat: 59.95, lng: 30.33}}\r\n                    defaultZoom={10}\r\n                    >\r\n                </GoogleMapReact>\r\n            </div>\r\n\r\n      \r\n            <CardDeck>\r\n                <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Cases</Card.Title>\r\n                    <Card.Text>\r\n                        {latest.cases}\r\n                    </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n                <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Deaths</Card.Title>\r\n                    <Card.Text>\r\n                        {latest.deaths}\r\n                    </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n                <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Recovered</Card.Title>\r\n                    <Card.Text>\r\n                        {latest.recovered}\r\n                    </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </CardDeck>\r\n\r\n            <Form>\r\n                <Form.Group controlId=\"formGroupSearch\">\r\n                    <Form.Label>Search Country</Form.Label>\r\n                    <br/>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter a Country by name\" onChange={e => setSearchCountry(e.target.value)} />\r\n                </Form.Group>\r\n            </Form>\r\n            <br/>\r\n            <CardColumns> {countries} </CardColumns>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Covid19;","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js",["98"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://comparison-b6dac-default-rtdb.firebaseio.com/Names.json\";\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nexport default class D3Comparison{\r\n    constructor(element){\r\n        const svg = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        const svg2 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        const svg3 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        d3.json(url).then(comparison=>{\r\n            //using max function, it will loop through the data and get the highest number of y value\r\n            const max = d3.max(comparison, d=> d.Mortality)\r\n           \r\n            const min = d3.min(comparison, d=> d.Mortality) *0.55\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([min, max]) //highest y value\r\n                .range([HEIGHT,0]) //minimum and maximum value \r\n\r\n            const x = d3.scaleBand()\r\n                .domain(comparison.map(d => d.Name))\r\n                .range([0,WIDTH])  \r\n                .padding(0.2)\r\n\r\n            const xAxisCall = d3.axisBottom(x)\r\n            svg.append(\"g\")\r\n             .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n             .call(xAxisCall)\r\n\r\n            const yAxisCall = d3.axisLeft(y)\r\n            svg.append(\"g\").call(yAxisCall)\r\n\r\n            svg.append(\"text\")\r\n              .attr(\"x\", WIDTH/2)\r\n              .attr(\"y\", HEIGHT + 50)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"A comparison of COVID-19, MERS and SARS\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"text-decoration\", \"underline\") \r\n              .style(\"font\", \"20px sans-serif\");\r\n\r\n            svg.append(\"text\")\r\n              .attr(\"x\",-(HEIGHT/2))\r\n              .attr(\"y\",-40)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mortality Rate (%)\")\r\n              .attr(\"transform\",\"rotate(-90)\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"20px sans-serif\");\r\n\r\n            const rects = svg.selectAll(\"rect\")\r\n            .data(comparison)\r\n\r\n            rects.enter().append(\"rect\")\r\n              .attr(\"x\", d=> x(d.Name))\r\n              .attr(\"y\", d => y(d.Mortality))\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT - y(d.Mortality))\r\n              .attr(\"fill\", d=>{\r\n                  if(d.Mortality > 20){\r\n                      return \"red\";\r\n                  }\r\n                  return \"green\";\r\n              })\r\n        })//end first\r\n\r\n        d3.json(url).then(comparison2=>{\r\n          //using max function, it will loop through the data and get the highest number of y value\r\n          const max2 = d3.max(comparison2, d=> d.Deaths)\r\n          const min2 = d3.min(comparison2, d=> d.Deaths) *0.55\r\n\r\n          const y = d3.scaleLinear()\r\n              .domain([min2, max2]) //highest y value\r\n              .range([HEIGHT,0]) //minimum and maximum value \r\n\r\n          const x = d3.scaleBand()\r\n              .domain(comparison2.map(d => d.Name))\r\n              .range([0,WIDTH])  \r\n              .padding(0.2)\r\n\r\n          const xAxisCall2 = d3.axisBottom(x)\r\n          svg2.append(\"g\")\r\n           .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n           .call(xAxisCall2)\r\n\r\n          const yAxisCall2 = d3.axisLeft(y)\r\n          svg2.append(\"g\").call(yAxisCall2)\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\", WIDTH/2)\r\n            .attr(\"y\", HEIGHT + 50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"A comparison of COVID-19, MERS and SARS\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-40)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of Deaths\")\r\n            .attr(\"transform\",\"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          const rects2 = svg2.selectAll(\"rect\")\r\n          .data(comparison2)\r\n\r\n          rects2.enter().append(\"rect\")\r\n            .attr(\"x\", d=> x(d.Name))\r\n            .attr(\"y\", d => y(d.Deaths))\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT - y(d.Deaths))\r\n            .attr(\"fill\", d=>{\r\n                if(d.Deaths > 1000){\r\n                    return \"red\";\r\n                }\r\n                return \"green\";\r\n            })\r\n      })//end second\r\n\r\n      d3.json(url).then(comparison3=>{\r\n        //using max function, it will loop through the data and get the highest number of y value\r\n        const max3 = d3.max(comparison3, d=> d.Cases)\r\n        const min3 = d3.min(comparison3, d=> d.Cases) *0.55\r\n\r\n        const y = d3.scaleLinear()\r\n            .domain([min3, max3]) //highest y value\r\n            .range([HEIGHT,0]) //minimum and maximum value \r\n\r\n        const x = d3.scaleBand()\r\n            .domain(comparison3.map(d => d.Name))\r\n            .range([0,WIDTH])  \r\n            .padding(0.2)\r\n\r\n        const xAxisCall3 = d3.axisBottom(x)\r\n        svg3.append(\"g\")\r\n         .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n         .call(xAxisCall3)\r\n\r\n        const yAxisCall3 = d3.axisLeft(y)\r\n        svg3.append(\"g\").call(yAxisCall3)\r\n\r\n        svg3.append(\"text\")\r\n          .attr(\"x\", WIDTH/2)\r\n          .attr(\"y\", HEIGHT + 50)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"A comparison of COVID-19, MERS and SARS\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"text-decoration\", \"underline\") \r\n          .style(\"font\", \"20px sans-serif\");\r\n          \r\n\r\n        svg3.append(\"text\")\r\n          .attr(\"x\",-(HEIGHT/2))\r\n          .attr(\"y\",-40)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"No. of Cases\")\r\n          .attr(\"transform\",\"rotate(-90)\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"font\", \"20px sans-serif\");\r\n          \r\n\r\n        const rects3 = svg3.selectAll(\"rect\")\r\n        .data(comparison3)\r\n\r\n        rects3.enter().append(\"rect\")\r\n          .attr(\"x\", d=> x(d.Name))\r\n          .attr(\"y\", d => y(d.Cases))\r\n          .attr(\"width\",x.bandwidth)\r\n          .attr(\"height\", d => HEIGHT - y(d.Cases))\r\n          .attr(\"fill\", d=>{\r\n              if(d.Cases > 10000){\r\n                  return \"red\";\r\n              }\r\n              return \"green\";\r\n          })\r\n    })//end third\r\n\r\n    }\r\n}","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js",["99","100","101"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://merssummary-default-rtdb.firebaseio.com/Names.json\";  // == Mers data.\r\nconst url2 = \"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\";  // == Sars data.\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 850 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nexport default class D3Comparison{\r\n    // This constructor function gets called only once when you first load up this visualization.\r\n    constructor(element){\r\n        const vis = this;\r\n\r\n        // D3 code goes here--!\r\n        // Appending SVG canvas and moving into the center of the screen according to the D3 margin convension.\r\n        vis.svg = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n          vis.svg.append(\"text\")\r\n            .attr(\"x\", WIDTH/2)\r\n            .attr(\"y\", HEIGHT+50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Year\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.svg.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of confirmed cases\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xAxisGroup = vis.svg.append(\"g\")\r\n            .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n\r\n          vis.yAxisGroup = vis.svg.append(\"g\")\r\n\r\n          Promise.all([\r\n            d3.json(\"https://merssummary-default-rtdb.firebaseio.com/Names.json\"),\r\n            d3.json(\"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\")\r\n          ]).then((datasets)=>{\r\n\r\n            vis.MersData=datasets[0]\r\n            vis.SarsData=datasets[1]\r\n            console.log(vis.MersData)\r\n            console.log(vis.SarsData)\r\n            vis.update(\"mers\")\r\n        })\r\n    }\r\n\r\n    // This update() method gets called you change your data.\r\n    update(virus){\r\n      const vis = this;\r\n\r\n      vis.data = (virus === \"mers\") ? vis.MersData : vis.SarsData;\r\n      //vis.xLabel.text(`coronavirus - ${virus} (Year)`)  // TEXT TYPE ERROR\r\n\r\n  \r\n      //using max function, it will loop through the data and get the highest number of y value.\r\n      const max = d3.max(vis.data, d=> d.Number)\r\n      const min = d3.min(vis.data, d=> d.Number) *0.95\r\n\r\n      const y = d3.scaleLinear()\r\n          .domain([min, max]) //highest y value.\r\n          .range([HEIGHT,0]) //minimum and maximum value .\r\n\r\n      const x = d3.scaleBand()\r\n          .domain(vis.data.map(d => d.Year))\r\n          .range([0,WIDTH])  \r\n          .padding(0.4)\r\n\r\n      const xAxisCall = d3.axisBottom(x)\r\n        vis.xAxisGroup.transition().duration(500).call(xAxisCall)\r\n\r\n      const yAxisCall = d3.axisLeft(y)\r\n       vis.yAxisGroup.transition().duration(500).call(yAxisCall)\r\n\r\n      // DATA JOIN\r\n      const rects = vis.svg.selectAll(\"rect\")\r\n            .data(vis.data)\r\n\r\n      // EXIT\r\n      rects.exit()\r\n        .transition().duration(500)\r\n          .attr(\"height\", 0)\r\n          .attr(\"y\", HEIGHT)\r\n          .remove()\r\n\r\n      // UPDATE\r\n      rects.transition().duration(500)\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"y\", d => y(d.Number))\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n\r\n\r\n      // ENTER\r\n      rects.enter().append(\"rect\")\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr(\"fill\", \"green\")\r\n        .attr(\"y\",HEIGHT)\r\n        .transition().duration(500)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n        .attr(\"y\", d => y(d.Number))\r\n    }\r\n}",["102","103"],{"ruleId":"104","severity":1,"message":"105","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":13},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"104","severity":1,"message":"112","line":1,"column":16,"nodeType":"106","messageId":"107","endLine":1,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":1,"column":1,"nodeType":"115","endLine":1,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":1,"column":1,"nodeType":"115","endLine":1,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":1,"column":1,"nodeType":"115","endLine":1,"endColumn":31},{"ruleId":"113","severity":1,"message":"114","line":4,"column":1,"nodeType":"115","endLine":9,"endColumn":2},{"ruleId":"116","severity":1,"message":"117","line":55,"column":23,"nodeType":"118","messageId":"119","endLine":55,"endColumn":25},{"ruleId":"104","severity":1,"message":"120","line":59,"column":15,"nodeType":"106","messageId":"107","endLine":59,"endColumn":19},{"ruleId":"104","severity":1,"message":"121","line":9,"column":9,"nodeType":"106","messageId":"107","endLine":9,"endColumn":12},{"ruleId":"104","severity":1,"message":"122","line":84,"column":9,"nodeType":"106","messageId":"107","endLine":84,"endColumn":16},{"ruleId":"104","severity":1,"message":"123","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":13},{"ruleId":"104","severity":1,"message":"123","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":13},{"ruleId":"104","severity":1,"message":"124","line":4,"column":7,"nodeType":"106","messageId":"107","endLine":4,"endColumn":10},{"ruleId":"104","severity":1,"message":"125","line":5,"column":7,"nodeType":"106","messageId":"107","endLine":5,"endColumn":11},{"ruleId":"108","replacedBy":"126"},{"ruleId":"110","replacedBy":"127"},"no-unused-vars","'Fbase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"'useState' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","'Map' is defined but never used.","'queries' is assigned a value but never used.","'svg' is defined but never used.","'url' is assigned a value but never used.","'url2' is assigned a value but never used.",["128"],["129"],"no-global-assign","no-unsafe-negation"]