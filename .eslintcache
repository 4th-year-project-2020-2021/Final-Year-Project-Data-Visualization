[{"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\index.js":"1","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js":"2","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js":"3","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js":"4","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js":"5","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js":"6","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js":"7","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js":"8","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js":"9","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Search.js":"10","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js":"11","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Upload.js":"12","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js":"13","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js":"14","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js":"15","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js":"16","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper2.js":"17","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js":"18","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\SymptomDropdown.js":"19","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js":"20","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\MapChart.js":"21","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js":"22"},{"size":296,"mtime":1611515551272,"results":"23","hashOfConfig":"24"},{"size":603,"mtime":1611574091369,"results":"25","hashOfConfig":"24"},{"size":808,"mtime":1611849288733,"results":"26","hashOfConfig":"24"},{"size":1691,"mtime":1611856039024,"results":"27","hashOfConfig":"24"},{"size":755,"mtime":1611849288733,"results":"28","hashOfConfig":"24"},{"size":2320,"mtime":1611875752306,"results":"29","hashOfConfig":"24"},{"size":1744,"mtime":1611856039032,"results":"30","hashOfConfig":"24"},{"size":26,"mtime":1611429625646,"results":"31","hashOfConfig":"24"},{"size":1068,"mtime":1611429625646,"results":"32","hashOfConfig":"24"},{"size":28,"mtime":1611429625646,"results":"33","hashOfConfig":"24"},{"size":7133,"mtime":1612106740381,"results":"34","hashOfConfig":"24"},{"size":2493,"mtime":1611856039032,"results":"35","hashOfConfig":"24"},{"size":1075,"mtime":1611875752311,"results":"36","hashOfConfig":"24"},{"size":509,"mtime":1611674027564,"results":"37","hashOfConfig":"24"},{"size":3888,"mtime":1611674027560,"results":"38","hashOfConfig":"24"},{"size":962,"mtime":1611849288733,"results":"39","hashOfConfig":"24"},{"size":968,"mtime":1611875752306,"results":"40","hashOfConfig":"24"},{"size":583,"mtime":1611429625646,"results":"41","hashOfConfig":"24"},{"size":694,"mtime":1611875752311,"results":"42","hashOfConfig":"24"},{"size":12732,"mtime":1611875752311,"results":"43","hashOfConfig":"24"},{"size":118,"mtime":1611875752306,"results":"44","hashOfConfig":"24"},{"size":15993,"mtime":1611875752311,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"ktgycr",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"49"},"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\index.js",["102"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Fbase from './Components/Fbase';\r\nimport App from './Components/App';\r\n\r\n// console.log(firebase);\r\n// It's responsible for attaching our react elements to the DOM.\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n",["103","104"],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js",["105"],"import React, {useState} from 'react';\r\nimport {BrowserRouter as Browser, Route, Redirect, Switch} from 'react-router-dom';\r\nimport Home from '../Routes/Home';\r\nimport Covid19 from '../Routes/Covid19';\r\nimport Search from '../Routes/Search';\r\nimport MersAndSars from '../Routes/MersAndSars';\r\nimport Smallpox from '../Routes/Smallpox';\r\nimport Comparison from '../Routes/Comparison';\r\nimport Profile from '../Routes/Profile';\r\nimport Upload from '../Routes/Upload';\r\nimport Header from './Header';\r\nimport Auth from '../Routes/Auth';\r\n\r\nfunction Router({isLoggedIn}){\r\n    return (\r\n        <Browser>\r\n          <>\r\n            {isLoggedIn && <Header /> }\r\n            <Switch>\r\n              {isLoggedIn ? (\r\n                <>\r\n                   <Route exact path=\"/\">\r\n                     <Home />\r\n                   </Route> \r\n                   <Route path=\"/covid19\" component={Covid19} />\r\n                   <Route path=\"/search\" component={Search} />\r\n                   <Route path=\"/mersandsars\" component={MersAndSars} />\r\n                   <Route path=\"/smallpox\" component={Smallpox} />\r\n                   <Route path=\"/comparison\" component={Comparison} />\r\n                   <Route path=\"/profile\" component={Profile} />\r\n                   <Route path=\"/upload\" component={Upload} />\r\n                   <Redirect from=\"*\" to=\"/\" /> \r\n                </>\r\n              ):(\r\n               <> \r\n                <Route exact path=\"/\">\r\n                  <Auth />\r\n                </Route>\r\n                <Redirect from=\"*\" to=\"/\" /> \r\n               </>\r\n              )}\r\n          </Switch>\r\n          </>\r\n        </Browser>\r\n    )\r\n    \r\n}\r\nexport default Router;","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js",["106"],"import React from 'react';\r\nimport Chart from \"react-google-charts\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction Smallpox() {\r\n    return(\r\n        <div>\r\n        <div><select>\r\n  <option selected value=\"year\">Year</option>\r\n  <option value=\"country\">Country</option>\r\n  \r\n</select>\r\n</div>\r\n        <Chart\r\n  width={'100%'}\r\n  height={'100%'}\r\n  chartType=\"GeoChart\"\r\n  data={[\r\n    ['Country','No of Cases'],\r\n    ['Algeria',755],\r\n    ['Austria',18],\r\n    ['Belgium', 21],\r\n    ['Bulgaria', 22],\r\n    ['Burma', 987],\r\n    ['Chile',1171],\r\n   // ['Czechoslovakia',1642],\r\n    //['Democratic Republic of Congo',1497],\r\n    ['Egypt',93],\r\n    ['Finland',27],\r\n    ['Germany',680],\r\n    ['Greece',250],\r\n    ['Hungary',131],\r\n    ['Indonesia',1445],\r\n    ['Iraq',475],\r\n    ['Italy',4644],\r\n    ['Japan',889],\r\n    ['Kenya',200],\r\n    //['Korea',8316],\r\n    ['Malaysia',232],\r\n    ['Morocco',203],\r\n    ['Netherlands',1],\r\n    ['Nigeria',1031],\r\n    ['Panama',215],\r\n    ['Romania',2744],\r\n    ['South Africa',1108],\r\n    ['Sri Lanka',18],\r\n    ['Tanzania', 1427],\r\n    ['Thailand', 404],\r\n    ['Russia', 100004],\r\n    ['Uganda', 506],\r\n    ['United Kingdom', 442],\r\n    ['United States', 108487],\r\n    ['Uruguay', 31],\r\n    ['Zimbabwe', 515],\r\n    \r\n    \r\n  ]}\r\n\r\n  options={{\r\n    region: 'world',\r\n    colorAxis: { colors: ['orange','yellow', 'green','blue', 'darkblue', 'red'] },\r\n  }}\r\n  // Note: you will need to get a mapsApiKey for your project.\r\n  // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\r\n  mapsApiKey=\"YOUR_KEY_HERE\"\r\n // rootProps={{ 'data-testid': '1' }}\r\n/>\r\n</div>\r\n\r\n    )\r\n}\r\nexport default Smallpox;\r\n//adapted from https://www.youtube.com/watch?v=oX7Wqavzoc0","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js",["107"],"export default ()=>\"Home\";","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Search.js",["108"],"export default ()=>\"Search\";","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js",["109","110"],"import React, { useEffect, useState } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"axios\"\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nimport Form from 'react-bootstrap/Form'\r\nimport GoogleMapReact from 'google-map-react';\r\nimport NumberFormat from 'react-number-format';\r\n\r\n// Referances\r\n// Styling - https://react-bootstrap.github.io/components/cards/\r\n// Styling - https://react-bootstrap.github.io/getting-started/introduction/\r\n// Get API - https://www.npmjs.com/package/axios\r\n// Time formats - https://www.npmjs.com/package/react-moment\r\n// Search bar - https://react-bootstrap.github.io/components/forms/\r\n// Google map - https://www.npmjs.com/package/google-map-react\r\n// Number format - https://www.npmjs.com/package/react-number-format\r\n\r\nfunction Covid19(){\r\n    // Storing data inside array\r\n\r\n    // Top cards\r\n    const[latest, setLatest] = useState([]);\r\n    // Country cards\r\n    const[results, setResults] = useState([]);\r\n    // Search bar\r\n    const[searchCountry, setSearchCountry] = useState(\"\");\r\n        \r\n    // Dealing with two APIs at once\r\n    useEffect(() => {\r\n        axios\r\n            .all([\r\n                // API for cards (cases, deaths, recoveres values) \r\n                axios.get(\"https://corona.lmao.ninja/v2/all\"),\r\n                // API for countrys\r\n                axios.get(\"https://corona.lmao.ninja/v2/countries\")\r\n        ])\r\n        .then(responceArr => {\r\n            setLatest(responceArr[0].data);\r\n            setResults(responceArr[1].data);\r\n        })\r\n        // Return an error (if any)\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }, []);\r\n        \r\n    // Getting updated time by converting miliseconds\r\n    const date = new Date(parseInt(latest.updated))\r\n    const lastUpdated = date.toString();\r\n\r\n    // Filter search\r\n    const filterCountry = results.filter(item  =>{\r\n        // If search and country the same -> return info\r\n        return searchCountry !== \"\" ? item.country.includes(searchCountry) : item;\r\n    })\r\n\r\n    // Assigning country markers to cases \r\n    const countriesLocation = results.map((data, i) => {\r\n        return (\r\n            <div\r\n                // Using latitude and longitude to plot\r\n                lat={data.countryInfo.lat}\r\n                lng={data.countryInfo.long}\r\n                // Various styling of marker\r\n                style={{\r\n                    color: \"black\",\r\n                    backgroundColor: \"#FFF\",\r\n                    height: \"25px\",\r\n                    width: \"42px\",\r\n                    textAlign: \"center\",\r\n                    borderRadius: \"20%\",\r\n                }}\r\n            >   \r\n                \r\n                <img height=\"10px\" src={data.countryInfo.flag}/>\r\n                {data.cases}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    // Creating a reusable component for country data\r\n    const countries = filterCountry.map((data, i) => {\r\n        return (\r\n            <Card\r\n            key={i}\r\n                bg=\"dark\"\r\n                text=\"light\"\r\n                className=\"text-center\"\r\n                style={{margin: \"10px\"}}\r\n            >\r\n            lat={data.countryInfo.lat}\r\n            lng={data.countryInfo.long}\r\n            \r\n            <Card.Body>\r\n                <Card.Title>{data.country}</Card.Title>\r\n                <Card.Text>Cases {data.cases}</Card.Text>\r\n                <Card.Text>Deaths {data.deaths}</Card.Text>\r\n                <Card.Text>Recovered {data.recovered}</Card.Text>\r\n                <Card.Text>Today's Cases {data.todayCases}</Card.Text>\r\n                <Card.Text>Today's Deaths {data.todayDeaths}</Card.Text>\r\n                <Card.Text>Active {data.active}</Card.Text>\r\n                <Card.Text>Critical {data.critical}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n        )\r\n    })\r\n\r\n    // Adapted from https://www.npmjs.com/package/react-columns\r\n    var queries = [{\r\n        columns: 2,\r\n        query: 'min-width: 500px'\r\n    }, {\r\n        columns: 3,\r\n        query: 'min-width: 1000px'\r\n    }];\r\n\r\n    return(\r\n        <div> <br/>\r\n            <h2 style={{height: \"40px\", textAlign: \"center\"}}> COVID-19 Live Data & Visuals </h2>\r\n        \r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyCMOO2VKuGpExDi9NjZ0jAofu5FOGJ4QbE\" }}\r\n                    defaultCenter={{lat: 28, lng: 3}}\r\n                    // Zoom level\r\n                    defaultZoom={3}\r\n                >\r\n                    {countriesLocation}\r\n                </GoogleMapReact>\r\n            </div>\r\n\r\n      \r\n            <CardDeck>\r\n                <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Cases</Card.Title>\r\n                    <NumberFormat\r\n                        value={latest.cases} \r\n                        displayType={'text'} \r\n                        thousandSeparator={true}>\r\n                    </NumberFormat>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n                <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Deaths</Card.Title>\r\n                    <NumberFormat\r\n                        value={latest.deaths} \r\n                        displayType={'text'} \r\n                        thousandSeparator={true}>\r\n                    </NumberFormat>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n                <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{margin: \"10px\"}} border=\"primary\">\r\n                    <Card.Body>\r\n                    <Card.Title>Total Recovered</Card.Title>\r\n                    <NumberFormat\r\n                        value={latest.recovered} \r\n                        displayType={'text'} \r\n                        thousandSeparator={true}>\r\n                    </NumberFormat>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                    <small>Last updated {lastUpdated}</small>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </CardDeck>          \r\n\r\n            <Form>\r\n                <Form.Group controlId=\"formGroupSearch\">\r\n                    <br/>\r\n                    <Form.Control type=\"text\" placeholder=\"Seach a specific country\" onChange={e => setSearchCountry(e.target.value)} />\r\n                </Form.Group>\r\n            </Form>\r\n            <br/>\r\n            <CardColumns> {countries} </CardColumns>\r\n        </div>\r\n\r\n        \r\n    );\r\n}\r\n\r\nexport default Covid19;","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Upload.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js",["111"],"import { authService } from 'Components/Fbase';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst Out  = styled.button`\r\n    cursor: pointer;\r\n    border-radius: 20px;\r\n    border: none;\r\n    padding: 10px 0px;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    width: 150px;\r\n    background: white;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport default () => {\r\n\r\n    const onLogOutClick = () => authService.signOut();\r\n     \r\n    return <><Out onClick={onLogOutClick}>Log Out</Out></>;\r\n}","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js",["112","113"],"import { authService, firebaseInstance } from 'Components/Fbase';\r\nimport styled from 'styled-components';\r\nimport React, {useState} from 'react';\r\n\r\nconst Form = styled.form`\r\n    display:flex;\r\n`;\r\n\r\nconst Error = styled.h2`\r\n    color: tomato;\r\n    text-align: center;\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Box= styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst Sn = styled.span`\r\n    color: #04aaff;\r\n    cursor: pointer;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    display: block;\r\n    font-size: 18px;\r\n    text-decoration: underline;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    border-radius: 20px;\r\n    border: 1px solid black;\r\n    text-align: center;\r\n    background-color: white;\r\n    color: black;\r\n    box-sizing: content-box;\r\n`;\r\n\r\nconst Btn = styled.button`\r\n    cursor: pointer;\r\n    width: 300px;\r\n    padding: 7px 20px;\r\n    text-align: center;\r\n    color: white;\r\n    border-radius: 20px;\r\n    background-color: #04aaff;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target: { name, value},\r\n        } = event;\r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }else{\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }\r\n            console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount(prev => !prev);\r\n    const onSocialClick = async (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target:{name}\r\n        } = event;\r\n\r\n        let provider;\r\n        if(name === \"google\"){\r\n            // Creates the provider object\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name == \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Form onSubmit={onSubmit}>\r\n                <Input \r\n                    name=\"email\" \r\n                    type=\"text\" \r\n                    placeholder=\"Email\" \r\n                    required \r\n                    value={email} \r\n                    onChange={onChange} \r\n                />\r\n                <Input \r\n                    name=\"password\"\r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password} \r\n                    onChange={onChange} \r\n                />\r\n                <Input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\" } />\r\n                <Error>{error}</Error>\r\n            </Form>\r\n            <Sn onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</Sn>\r\n            <Box>\r\n                <Btn onClick={onSocialClick} name=\"google\">Continue with Google</Btn>\r\n                <Btn onClick={onSocialClick} name=\"github\">Continue with Github</Btn>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default Auth;\r\n   ","C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper2.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\SymptomDropdown.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js",["114","115","116","117","118","119","120"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://merssummary-default-rtdb.firebaseio.com/Names.json\";  // == Mers data.\r\nconst url2 = \"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\";  // == Sars data.\r\nconst mersCountry = \"https://reactproject1-3472c-default-rtdb.firebaseio.com/MersCountry.json\";\r\nconst sarsCountry = \"https://reactproject11-c3541-default-rtdb.firebaseio.com/SarsCountry.json\";\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 850 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nconst WIDTH2 = 1100 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT2 = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\nconst MARGIN2 ={ TOP:10, BOTTOM:60, LEFT:60, RIGHT:10};\r\n\r\nconst MWIDTH3 = 500 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT3 = 400 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nexport default class D3Comparison{\r\n    // This constructor function gets called only once when you first load up this visualization.\r\n    constructor(element){\r\n        const vis = this;\r\n\r\n        // D3 code goes here--!\r\n        // Appending SVG canvas and moving into the center of the screen according to the D3 margin convension.\r\n        vis.svg = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        const svg2 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const tsvg2 = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"Middle East had the highest number cases (88.4%), followed by Asia (10.7%), Europe (0.8%) and USA with only 2 cases officially reported (0.1%).\");\r\n\r\n        const svg3 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const tsvg3 = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"The majority of SARS cases were from China, Canada and Singapore, among which, cases from China mainland presented the largest proportion, followed by that from Hong Kong and Taiwan.\");\r\n\r\n          \r\n          vis.svg.append(\"text\")\r\n            .attr(\"x\", WIDTH/2)\r\n            .attr(\"y\", HEIGHT+50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Year\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          vis.svg.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of confirmed cases\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          vis.xAxisGroup = vis.svg.append(\"g\")\r\n            .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n\r\n          vis.yAxisGroup = vis.svg.append(\"g\")\r\n\r\n\r\n\r\n          // Mers - Country\r\n          d3.json(mersCountry).then(comparison2=>{\r\n            //using max function, it will loop through the data and get the highest number of y value\r\n            const max2 = d3.max(comparison2, d=> d.Confirmed)\r\n           \r\n            const min2 = d3.min(comparison2, d=> d.Confirmed) *0.99\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([min2, max2]) //highest y value\r\n                .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n            const x = d3.scaleBand()\r\n                .domain(comparison2.map(d => d.Country))\r\n                .range([0,WIDTH2])  \r\n                .padding(0.2)\r\n\r\n            const xAxisCall2 = d3.axisBottom(x)\r\n            svg2.append(\"g\")\r\n             .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n             .call(xAxisCall2)\r\n\r\n            const yAxisCall2 = d3.axisLeft(y)\r\n            svg2.append(\"g\").call(yAxisCall2)\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 + 50)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mers - Country\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"text-decoration\", \"underline\") \r\n              .style(\"font\", \"15px sans-serif\");\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\",-(HEIGHT2/2))\r\n              .attr(\"y\",-40)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"No. of Confirmed Cases\")\r\n              .attr(\"transform\",\"rotate(-90)\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"15px sans-serif\");\r\n\r\n            const rects2 = svg2.selectAll(\"rect\")\r\n            .data(comparison2)\r\n\r\n            rects2.enter().append(\"rect\")\r\n              .attr(\"x\", d=> x(d.Country))\r\n              .attr(\"y\", d => y(d.Confirmed))\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n              .attr(\"fill\", d => {\r\n                  if(d.Confirmed > 50){\r\n                      return \"red\";\r\n                  }\r\n                  return \"green\";\r\n              })\r\n              .on(\"mouseover\", function() {\r\n                //Do something on mouseover of any bar\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"red\");\r\n              })\r\n              .on(\"mouseout\", function(d) {\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"blue\");\r\n              })\r\n              .append(\"title\")\r\n                .text(d=>`Number of Confirmed Cases : ${d.Confirmed}  in ${d.Country}`);\r\n\r\n                \r\n          rects2.enter().append(\"text\")\r\n            .attr(\"class\", \"value\")\r\n            .attr(\"x\", d=> x(d.Country))\r\n            .attr(\"y\", d => y(d.Confirmed))\r\n            .attr(\"dy\", \".35em\") //vertical align middle\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT - y(d.Confirmed))\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(d=>d.Confirmed)\r\n            .attr(\"font-family\" , \"sans-serif\")\r\n            .attr(\"font-size\" , \"14px\")\r\n            .attr(\"fill\" , \"white\")\r\n        })// End Mers - Country\r\n\r\n        // Start Sars - Country\r\n        d3.json(sarsCountry).then(comparison3=>{\r\n          //using max function, it will loop through the data and get the highest number of y value\r\n          const max3 = d3.max(comparison3, d=> d.Confirmed)\r\n          const min3 = d3.min(comparison3, d=> d.Confirmed) *0.99\r\n  \r\n          const y = d3.scaleLinear()\r\n              .domain([min3, max3]) //highest y value\r\n              .range([HEIGHT2,0]) //minimum and maximum value \r\n  \r\n          const x = d3.scaleBand()\r\n              .domain(comparison3.map(d => d.Country))\r\n              .range([0,WIDTH2])  \r\n              .padding(0.2)\r\n  \r\n          const xAxisCall3 = d3.axisBottom(x)\r\n          svg3.append(\"g\")\r\n           .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n           .call(xAxisCall3)\r\n  \r\n          const yAxisCall3 = d3.axisLeft(y)\r\n          svg3.append(\"g\").call(yAxisCall3)\r\n  \r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 + 50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Mers - Country\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"font\", \"15px sans-serif\");\r\n            \r\n  \r\n          svg3.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT2/2))\r\n            .attr(\"y\",-40)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of Confirmed Cases\")\r\n            .attr(\"transform\",\"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n            \r\n  \r\n          const rects3 = svg3.selectAll(\"rect\")\r\n          .data(comparison3)\r\n  \r\n          rects3.enter().append(\"rect\")\r\n            .attr(\"x\", d=> x(d.Country))\r\n            .attr(\"y\", d => y(d.Confirmed))\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n            .attr(\"fill\", d=>{\r\n                if(d.Confirmed > 500){\r\n                    return \"red\";\r\n                }\r\n                return \"green\";\r\n            })\r\n            .on(\"mouseover\", function() {\r\n              //Do something on mouseover of any bar\r\n              d3.select(this)\r\n                .attr(\"fill\", \"red\");\r\n            })\r\n            .on(\"mouseout\", function(d) {\r\n              d3.select(this)\r\n                .attr(\"fill\", \"blue\");\r\n            })\r\n            .append(\"title\")\r\n              .text(d=>`Number of Confirmed Cases : ${d.Confirmed}  in ${d.Country}`);\r\n\r\n            rects3.enter().append(\"text\")\r\n            .attr(\"class\", \"value\")\r\n            .attr(\"x\", d=> x(d.Country))\r\n            .attr(\"y\", d => y(d.Confirmed))\r\n            .attr(\"dy\", \".35em\") //vertical align middle\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT - y(d.Confirmed))\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(d=>d.Confirmed)\r\n            .attr(\"font-family\" , \"sans-serif\")\r\n            .attr(\"font-size\" , \"14px\")\r\n            .attr(\"fill\" , \"white\")\r\n      })//end third\r\n  \r\n          Promise.all([\r\n            d3.json(\"https://merssummary-default-rtdb.firebaseio.com/Names.json\"),\r\n            d3.json(\"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\")\r\n          ]).then((datasets)=>{\r\n\r\n            vis.MersData=datasets[0]\r\n            vis.SarsData=datasets[1]\r\n            console.log(vis.MersData)\r\n            console.log(vis.SarsData)\r\n            vis.update(\"mers\")\r\n            \r\n        })\r\n    }\r\n\r\n    // This update() method gets called you change your data.\r\n    update(virus){\r\n      const vis = this;\r\n\r\n      vis.data = (virus === \"mers\") ? vis.MersData : vis.SarsData;\r\n      //vis.xLabel.text(`coronavirus - ${virus} (Year)`)  // TEXT TYPE ERROR\r\n\r\n  \r\n      //using max function, it will loop through the data and get the highest number of y value.\r\n      const max = d3.max(vis.data, d=> d.Number)\r\n      const min = d3.min(vis.data, d=> d.Number) *0.95\r\n\r\n      const y = d3.scaleLinear()\r\n          .domain([min, max]) //highest y value.\r\n          .range([HEIGHT,0]) //minimum and maximum value .\r\n\r\n      const x = d3.scaleBand()\r\n          .domain(vis.data.map(d => d.Year))\r\n          .range([0,WIDTH])  \r\n          .padding(0.4)\r\n\r\n      const xAxisCall = d3.axisBottom(x)\r\n        vis.xAxisGroup.transition().duration(500).call(xAxisCall)\r\n\r\n      const yAxisCall = d3.axisLeft(y)\r\n       vis.yAxisGroup.transition().duration(500).call(yAxisCall)\r\n\r\n      // DATA JOIN\r\n      const rects = vis.svg.selectAll(\"rect\")\r\n            .data(vis.data)\r\n\r\n      // EXIT\r\n      rects.exit()\r\n        .transition().duration(500)\r\n          .attr(\"height\", 0)\r\n          .attr(\"y\", HEIGHT)\r\n          .remove()\r\n\r\n      // UPDATE\r\n      rects.transition().duration(500)\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"y\", d => y(d.Number))\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n\r\n\r\n      // ENTER\r\n      rects.enter().append(\"rect\")\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr(\"fill\", d=>{\r\n          if(d.Number > 300){\r\n              return \"red\";\r\n          }\r\n          return \"green\";\r\n      })\r\n      \r\n        .attr(\"y\",HEIGHT)\r\n        .transition().duration(500)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n        .attr(\"y\", d => y(d.Number))\r\n\r\n    }\r\n}",["121","122"],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\Components\\MapChart.js",[],"C:\\Users\\Grace Keane\\Desktop\\FV\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js",["123","124","125","126","127","128","129"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://comparison-b6dac-default-rtdb.firebaseio.com/Names.json\";\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 1050 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\n\r\nconst WIDTH2 = 500 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT2 = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\nconst MARGIN2 ={ TOP:10, BOTTOM:60, LEFT:60, RIGHT:10};\r\n\r\nconst url2 =\"https://covid19symptom-default-rtdb.firebaseio.com/Names.json\";  //covid-19 symptom\r\nconst url3 =\"https://merssymptom-default-rtdb.firebaseio.com/Names.json\";  //mers\r\nconst url4 =\"https://sarssymptom-default-rtdb.firebaseio.com/Names.json\";  //sars\r\n\r\n\r\nexport default class D3Comparison{\r\n    constructor(element){\r\n      const vis = this;\r\n\r\n      // D3 code goes here--!\r\n      // Appending SVG canvas and moving into the center of the screen according to the D3 margin convension.\r\n      vis.svgg = d3.select(element)\r\n        .append(\"svg\")\r\n          .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n          .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n        .append(\"g\")\r\n          .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        const ttsvg = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#A52A2A\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"This is preliminary COVID-19 data. While SARS and MERS' mortality rates are well understood, the definition of COVID-19 diagnoses is still shifting and it may be years until the actual number of cases is known.\");\r\n\r\n        const svg = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n     \r\n        const tsvg = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"COVID-19 seems not to be very different from SARS regarding its clinical features. However, it has a fatality rate of 5.6%, lower than that of SARS (9.63%) and much lower than that of MERS (34.45%).\");\r\n      \r\n        const svg2 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        const tsvg2 = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"However, despite the lower case fatality rate, covid-19 has so far resulted in more deaths than SARS and MERS combined.\");\r\n\r\n        const svg3 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n            vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/2)\r\n            .attr(\"y\", HEIGHT+50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Symptoms\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          vis.svgg.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Number\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          vis.xAxisGroup = vis.svgg.append(\"g\")\r\n            .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n\r\n          vis.yAxisGroup = vis.svgg.append(\"g\")\r\n          //--------------\r\n\r\n\r\n        d3.json(url).then(comparison=>{\r\n            //using max function, it will loop through the data and get the highest number of y value\r\n            const max = d3.max(comparison, d=> d.Mortality)\r\n           \r\n            const min = d3.min(comparison, d=> d.Mortality) *0.55\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([min, max]) //highest y value\r\n                .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n            const x = d3.scaleBand()\r\n                .domain(comparison.map(d => d.Name))\r\n                .range([0,WIDTH2])  \r\n                .padding(0.2)\r\n\r\n            const xAxisCall = d3.axisBottom(x)\r\n            svg.append(\"g\")\r\n             .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n             .call(xAxisCall)\r\n\r\n            const yAxisCall = d3.axisLeft(y)\r\n            svg.append(\"g\").call(yAxisCall)\r\n\r\n            svg.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 + 50)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"A comparison of COVID-19, MERS and SARS\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"text-decoration\", \"underline\") \r\n              .style(\"font\", \"20px sans-serif\");\r\n\r\n            svg.append(\"text\")\r\n              .attr(\"x\",-(HEIGHT2/2))\r\n              .attr(\"y\",-40)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mortality Rate (%)\")\r\n              .attr(\"transform\",\"rotate(-90)\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"20px sans-serif\")\r\n              .style(\"pointer-events\", \"none\");\r\n\r\n            const rects = svg.selectAll(\"rect\")\r\n            .data(comparison)\r\n\r\n            rects.enter().append(\"rect\")\r\n              .attr(\"x\", d=> x(d.Name))\r\n              .attr(\"y\", d => y(d.Mortality))\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Mortality))\r\n              .attr(\"fill\", d=>{\r\n                  if(d.Mortality > 20){\r\n                      return \"red\";\r\n                  }\r\n                  return \"green\";\r\n              })\r\n              .on(\"mouseover\", function() {\r\n                //Do something on mouseover of any bar\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"red\");\r\n              })\r\n              .on(\"mouseout\", function(d) {\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"grey\");\r\n              })\r\n              .append(\"title\")\r\n                .text(d=>`Mortality Rate : ${d.Mortality} % in ${d.Name}`);\r\n              \r\n\r\n            rects.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name))\r\n              .attr(\"y\", d => y(d.Mortality))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Mortality))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>d.Mortality+ \" %\")\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"14px\")\r\n              .attr(\"fill\" , \"white\")\r\n        })//end first\r\n\r\n        d3.json(url).then(comparison2=>{\r\n          //using max function, it will loop through the data and get the highest number of y value\r\n          const max2 = d3.max(comparison2, d=> d.Deaths)\r\n          const min2 = d3.min(comparison2, d=> d.Deaths) *0.55\r\n\r\n          const y = d3.scaleLinear()\r\n              .domain([min2, max2]) //highest y value\r\n              .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n          const x = d3.scaleBand()\r\n              .domain(comparison2.map(d => d.Name))\r\n              .range([0,WIDTH2])  \r\n              .padding(0.2)\r\n\r\n          const xAxisCall2 = d3.axisBottom(x)\r\n          svg2.append(\"g\")\r\n           .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n           .call(xAxisCall2)\r\n\r\n          const yAxisCall2 = d3.axisLeft(y)\r\n          svg2.append(\"g\").call(yAxisCall2)\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 + 50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"A comparison of COVID-19, MERS and SARS\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT2/2))\r\n            .attr(\"y\",-40)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of Deaths\")\r\n            .attr(\"transform\",\"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          const rects2 = svg2.selectAll(\"rect\")\r\n          .data(comparison2)\r\n\r\n          rects2.enter().append(\"rect\")\r\n            .attr(\"x\", d=> x(d.Name))\r\n            .attr(\"y\", d => y(d.Deaths))\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT2 - y(d.Deaths))\r\n            .attr(\"fill\", d=>{\r\n                if(d.Deaths > 1000){\r\n                    return \"red\";\r\n                }\r\n                return \"green\";\r\n            })\r\n            .on(\"mouseover\", function() {\r\n              //Do something on mouseover of any bar\r\n              d3.select(this)\r\n                .attr(\"fill\", \"red\");\r\n            })\r\n            .on(\"mouseout\", function(d) {\r\n              d3.select(this)\r\n                .attr(\"fill\", \"grey\");\r\n            })\r\n            .append(\"title\")\r\n              .text(d=>`Number of Deaths : ${d.Deaths}  in ${d.Name}`);\r\n\r\n            rects2.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name))\r\n              .attr(\"y\", d => y(d.Deaths))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Deaths))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>d.Deaths)\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"14px\")\r\n              .attr(\"fill\" , \"white\")\r\n      })//end second\r\n\r\n      d3.json(url).then(comparison3=>{\r\n        //using max function, it will loop through the data and get the highest number of y value\r\n        const max3 = d3.max(comparison3, d=> d.Cases)\r\n        const min3 = d3.min(comparison3, d=> d.Cases) *0.55\r\n\r\n        const y = d3.scaleLinear()\r\n            .domain([min3, max3]) //highest y value\r\n            .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n        const x = d3.scaleBand()\r\n            .domain(comparison3.map(d => d.Name))\r\n            .range([0,WIDTH2])  \r\n            .padding(0.2)\r\n\r\n        const xAxisCall3 = d3.axisBottom(x)\r\n        svg3.append(\"g\")\r\n         .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n         .call(xAxisCall3)\r\n\r\n        const yAxisCall3 = d3.axisLeft(y)\r\n        svg3.append(\"g\").call(yAxisCall3)\r\n\r\n        svg3.append(\"text\")\r\n          .attr(\"x\", WIDTH2/2)\r\n          .attr(\"y\", HEIGHT2 + 50)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"A comparison of COVID-19, MERS and SARS\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"text-decoration\", \"underline\") \r\n          .style(\"font\", \"20px sans-serif\");\r\n          \r\n\r\n        svg3.append(\"text\")\r\n          .attr(\"x\",-(HEIGHT2/2))\r\n          .attr(\"y\",-40)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"No. of Cases\")\r\n          .attr(\"transform\",\"rotate(-90)\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"font\", \"20px sans-serif\");\r\n          \r\n\r\n        const rects3 = svg3.selectAll(\"rect\")\r\n        .data(comparison3)\r\n\r\n        rects3.enter().append(\"rect\")\r\n          .attr(\"x\", d=> x(d.Name))\r\n          .attr(\"y\", d => y(d.Cases))\r\n          .attr(\"width\",x.bandwidth)\r\n          .attr(\"height\", d => HEIGHT2 - y(d.Cases))\r\n          .attr(\"fill\", d=>{\r\n              if(d.Cases > 10000){\r\n                  return \"red\";\r\n              }\r\n              return \"green\";\r\n          })\r\n          .on(\"mouseover\", function() {\r\n            //Do something on mouseover of any bar\r\n            d3.select(this)\r\n              .attr(\"fill\", \"red\");\r\n          })\r\n          .on(\"mouseout\", function(d) {\r\n            d3.select(this)\r\n              .attr(\"fill\", \"grey\");\r\n          })\r\n          .append(\"title\")\r\n            .text(d=>`Number of Cases : ${d.Cases}  in ${d.Name}`);\r\n          \r\n\r\n          rects3.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name))\r\n              .attr(\"y\", d => y(d.Cases))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Cases))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>d.Cases)\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"14px\")\r\n              .attr(\"fill\" , \"white\")\r\n    })//end third\r\n    \r\n    Promise.all([\r\n      d3.json(\"https://covid19symptom-default-rtdb.firebaseio.com/Names.json\"),\r\n      d3.json(\"https://merssymptom-default-rtdb.firebaseio.com/Names.json\"),\r\n      d3.json(\"https://sarssymptom-default-rtdb.firebaseio.com/Names.json\")\r\n    ]).then((datasets)=>{\r\n\r\n      vis.Covid19Data=datasets[0]\r\n      vis.MersData=datasets[1]\r\n      vis.SarsData=datasets[2]\r\n\r\n      console.log(vis.Covid19Data)\r\n      console.log(vis.MersData)\r\n      console.log(vis.SarsData)\r\n      vis.update(\"covid19\")\r\n      \r\n  })\r\n}\r\n\r\n// This update() method gets called you change your data.\r\nupdate(virus){\r\nconst vis = this;\r\n\r\nvis.data = (virus === \"covid19\") ? vis.Covid19Data : (virus === \"mers\") ? vis.MersData : vis.SarsData;\r\n//vis.xLabel.text(`coronavirus - ${virus} (Year)`)  // TEXT TYPE ERROR\r\n\r\n\r\n//using max function, it will loop through the data and get the highest number of y value.\r\nconst max = d3.max(vis.data, d=> d.Number)\r\nconst min = d3.min(vis.data, d=> d.Number) *0.95\r\n\r\nconst y = d3.scaleLinear()\r\n    .domain([min, max]) //highest y value.\r\n    .range([HEIGHT,0]) //minimum and maximum value .\r\n\r\nconst x = d3.scaleBand()\r\n    .domain(vis.data.map(d => d.Name))\r\n    .range([0,WIDTH])  \r\n    .padding(0.4)\r\n\r\nconst xAxisCall = d3.axisBottom(x)\r\n  vis.xAxisGroup.transition().duration(500).call(xAxisCall)\r\n\r\nconst yAxisCall = d3.axisLeft(y)\r\n vis.yAxisGroup.transition().duration(500).call(yAxisCall)\r\n\r\n// DATA JOIN\r\nconst rects = vis.svgg.selectAll(\"rect\")\r\n      .data(vis.data)\r\n\r\n// EXIT\r\nrects.exit()\r\n  .transition().duration(500)\r\n    .attr(\"height\", 0)\r\n    .attr(\"y\", HEIGHT)\r\n    .remove()\r\n\r\n// UPDATE\r\nrects.transition().duration(500)\r\n  .attr(\"x\", d => x(d.Name))\r\n  .attr(\"y\", d => y(d.Number))\r\n  .attr(\"width\", x.bandwidth)\r\n  .attr(\"height\", d => HEIGHT-y(d.Number))\r\n\r\n\r\n// ENTER\r\nrects.enter().append(\"rect\")\r\n  .attr(\"x\", d => x(d.Name))\r\n  .attr(\"width\", x.bandwidth)\r\n  .attr(\"fill\", d=>{\r\n    if(d.Number > 50){\r\n        return \"red\";\r\n    }\r\n    return \"green\";\r\n})\r\n\r\n  .attr(\"y\",HEIGHT)\r\n  .transition().duration(500)\r\n  .attr(\"height\", d => HEIGHT-y(d.Number))\r\n  .attr(\"y\", d => y(d.Number))\r\n\r\n}\r\n}",{"ruleId":"130","severity":1,"message":"131","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":13},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"130","severity":1,"message":"138","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"139","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":1,"column":1,"nodeType":"142","endLine":1,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":1,"column":1,"nodeType":"142","endLine":1,"endColumn":29},{"ruleId":"143","severity":1,"message":"144","line":77,"column":17,"nodeType":"145","endLine":77,"endColumn":65},{"ruleId":"130","severity":1,"message":"146","line":111,"column":9,"nodeType":"132","messageId":"133","endLine":111,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":17,"column":1,"nodeType":"142","endLine":22,"endColumn":2},{"ruleId":"147","severity":1,"message":"148","line":103,"column":23,"nodeType":"149","messageId":"150","endLine":103,"endColumn":25},{"ruleId":"130","severity":1,"message":"151","line":107,"column":15,"nodeType":"132","messageId":"133","endLine":107,"endColumn":19},{"ruleId":"130","severity":1,"message":"152","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"153","line":4,"column":7,"nodeType":"132","messageId":"133","endLine":4,"endColumn":10},{"ruleId":"130","severity":1,"message":"154","line":5,"column":7,"nodeType":"132","messageId":"133","endLine":5,"endColumn":11},{"ruleId":"130","severity":1,"message":"155","line":16,"column":7,"nodeType":"132","messageId":"133","endLine":16,"endColumn":14},{"ruleId":"130","severity":1,"message":"156","line":17,"column":7,"nodeType":"132","messageId":"133","endLine":17,"endColumn":14},{"ruleId":"130","severity":1,"message":"157","line":40,"column":15,"nodeType":"132","messageId":"133","endLine":40,"endColumn":20},{"ruleId":"130","severity":1,"message":"158","line":54,"column":15,"nodeType":"132","messageId":"133","endLine":54,"endColumn":20},{"ruleId":"134","replacedBy":"159"},{"ruleId":"136","replacedBy":"160"},{"ruleId":"130","severity":1,"message":"152","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"154","line":14,"column":7,"nodeType":"132","messageId":"133","endLine":14,"endColumn":11},{"ruleId":"130","severity":1,"message":"161","line":15,"column":7,"nodeType":"132","messageId":"133","endLine":15,"endColumn":11},{"ruleId":"130","severity":1,"message":"162","line":16,"column":7,"nodeType":"132","messageId":"133","endLine":16,"endColumn":11},{"ruleId":"130","severity":1,"message":"163","line":32,"column":15,"nodeType":"132","messageId":"133","endLine":32,"endColumn":20},{"ruleId":"130","severity":1,"message":"164","line":47,"column":15,"nodeType":"132","messageId":"133","endLine":47,"endColumn":19},{"ruleId":"130","severity":1,"message":"157","line":61,"column":15,"nodeType":"132","messageId":"133","endLine":61,"endColumn":20},"no-unused-vars","'Fbase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["165"],"no-negated-in-lhs",["166"],"'useState' is defined but never used.","'Dropdown' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'queries' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","'svg' is defined but never used.","'url' is assigned a value but never used.","'url2' is assigned a value but never used.","'MWIDTH3' is assigned a value but never used.","'HEIGHT3' is assigned a value but never used.","'tsvg2' is assigned a value but never used.","'tsvg3' is assigned a value but never used.",["165"],["166"],"'url3' is assigned a value but never used.","'url4' is assigned a value but never used.","'ttsvg' is assigned a value but never used.","'tsvg' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]