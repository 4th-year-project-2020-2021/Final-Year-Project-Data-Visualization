[{"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\index.js":"1","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js":"2","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js":"3","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js":"4","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js":"5","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js":"6","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js":"7","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js":"8","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js":"9","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js":"10","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js":"11","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Upload.js":"12","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js":"13","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js":"14","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper2.js":"15","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js":"16","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js":"17","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\SymptomDropdown.js":"18","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Piechart.js":"19","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js":"20","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js":"21"},{"size":296,"mtime":1612536099029,"results":"22","hashOfConfig":"23"},{"size":603,"mtime":1612536098993,"results":"24","hashOfConfig":"23"},{"size":808,"mtime":1612536098983,"results":"25","hashOfConfig":"23"},{"size":668,"mtime":1613056901422,"results":"26","hashOfConfig":"23"},{"size":1587,"mtime":1612536099002,"results":"27","hashOfConfig":"23"},{"size":2143,"mtime":1612536098997,"results":"28","hashOfConfig":"23"},{"size":9357,"mtime":1613064612165,"results":"29","hashOfConfig":"23"},{"size":1918,"mtime":1612536099029,"results":"30","hashOfConfig":"23"},{"size":26,"mtime":1612536099026,"results":"31","hashOfConfig":"23"},{"size":509,"mtime":1612536099027,"results":"32","hashOfConfig":"23"},{"size":1068,"mtime":1612536099027,"results":"33","hashOfConfig":"23"},{"size":2738,"mtime":1612536099029,"results":"34","hashOfConfig":"23"},{"size":3888,"mtime":1612536099018,"results":"35","hashOfConfig":"23"},{"size":1075,"mtime":1612536099018,"results":"36","hashOfConfig":"23"},{"size":1044,"mtime":1612628258243,"results":"37","hashOfConfig":"23"},{"size":900,"mtime":1612628258237,"results":"38","hashOfConfig":"23"},{"size":744,"mtime":1612536099011,"results":"39","hashOfConfig":"23"},{"size":841,"mtime":1612536099011,"results":"40","hashOfConfig":"23"},{"size":3847,"mtime":1612894300522,"results":"41","hashOfConfig":"23"},{"size":18456,"mtime":1612628258243,"results":"42","hashOfConfig":"23"},{"size":36334,"mtime":1612894300521,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1ayq6gq",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"47"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"47"},"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\index.js",["97"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Fbase from './Components/Fbase';\r\nimport App from './Components/App';\r\n\r\n// console.log(firebase);\r\n// It's responsible for attaching our react elements to the DOM.\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n",["98","99"],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Fbase.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\App.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\GlobalStyles.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Router.js",["100"],"import React, {useState} from 'react';\r\nimport {BrowserRouter as Browser, Route, Redirect, Switch} from 'react-router-dom';\r\nimport Home from '../Routes/Home';\r\nimport Covid19 from '../Routes/Covid19';\r\nimport MersAndSars from '../Routes/MersAndSars';\r\nimport Smallpox from '../Routes/Smallpox';\r\nimport Comparison from '../Routes/Comparison';\r\nimport Profile from '../Routes/Profile';\r\nimport Upload from '../Routes/Upload';\r\nimport Header from './Header';\r\nimport Auth from '../Routes/Auth';\r\n\r\nfunction Router({isLoggedIn}){\r\n    return (\r\n        <Browser>\r\n          <>\r\n            {isLoggedIn && <Header /> }\r\n            <Switch>\r\n              {isLoggedIn ? (\r\n                <>\r\n                   <Route exact path=\"/\">\r\n                     <Home />\r\n                   </Route> \r\n                   <Route path=\"/covid19\" component={Covid19} />\r\n                   <Route path=\"/mersandsars\" component={MersAndSars} />\r\n                   <Route path=\"/smallpox\" component={Smallpox} />\r\n                   <Route path=\"/comparison\" component={Comparison} />\r\n                   <Route path=\"/profile\" component={Profile} />\r\n                   <Route path=\"/upload\" component={Upload} />\r\n                   <Redirect from=\"*\" to=\"/\" /> \r\n                </>\r\n              ):(\r\n               <> \r\n                <Route exact path=\"/\">\r\n                  <Auth />\r\n                </Route>\r\n                <Redirect from=\"*\" to=\"/\" /> \r\n               </>\r\n              )}\r\n          </Switch>\r\n          </>\r\n        </Browser>\r\n    )\r\n    \r\n}\r\nexport default Router;","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\Header.js",["101"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\nconst List = styled.ul`\r\n    display:flex;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    color : white;\r\n    position:fixed;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:50px;\r\n    display:flex;\r\n    align-items:center;\r\n    padding:0px 10px;\r\n    background-color:rgba(20,20,20,0.8);\r\n    z-index:10;\r\n    box-shadow:0px 1px 5px 2px rgba(0,0,0,0.8);\r\n`;\r\n\r\nconst Item = styled.li`\r\n    width:120px;\r\n    height:50px;\r\n    text-align:center;\r\n    border-bottom:5px solid ${props => props.current ? \"#8B0000\":\"transparent\"};\r\n    transition : border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n    height:50px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    height:50px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    color:white;\r\n    text-align:right;\r\n`;\r\n\r\nexport default withRouter(({ location : {pathname} })=>(\r\n        <Header>\r\n            <List>\r\n                <Item current={pathname === \"/\"}>\r\n                    <SLink to=\"/\">Home </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/covid19\"}>\r\n                    <SLink to=\"/covid19\">Covid-19 </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/mersandsars\"}>\r\n                    <SLink to=\"/mersandsars\">Mers and Sars </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/smallpox\"}>\r\n                    <SLink to=\"/smallpox\">Smallpox </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/comparison\"}>\r\n                    <SLink to=\"/comparison\">Comparison </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/upload\"}>\r\n                    <SLink to=\"/upload\">Upload </SLink>\r\n                </Item>\r\n                <Item current={pathname === \"/profile\"}>\r\n                    <SLink to=\"/profile\">Profile </SLink>\r\n                </Item>\r\n            </List>\r\n        </Header>\r\n    )\r\n\r\n)","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Covid19.js",["102","103","104","105"],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Smallpox.js",["106"],"import React from 'react';\r\nimport Chart from \"react-google-charts\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nconst paragraphStyle = {\r\n  marginTop: '10px',\r\n  marginBottom: '10px'\r\n};\r\n\r\n\r\nfunction Smallpox() {\r\n    return(\r\n        <div>\r\n        \r\n        <p style={paragraphStyle}><h3>Smallpox cases - hover over country to see case numbers</h3></p>\r\n        <div><select>\r\n  <option selected value=\"year\">Year</option>\r\n  <option value=\"country\">Country</option>\r\n  \r\n</select>\r\n</div>\r\n        <Chart\r\n  width={'100%'}\r\n  height={'100%'}\r\n  chartType=\"GeoChart\"\r\n  data={[\r\n    ['Country','No of Cases'],\r\n    ['Algeria',755],\r\n    ['Austria',18],\r\n    ['Belgium', 21],\r\n    ['Bulgaria', 22],\r\n    ['Burma', 987],\r\n    ['Chile',1171],\r\n   // ['Czechoslovakia',1642],\r\n    //['Democratic Republic of Congo',1497],\r\n    ['Egypt',93],\r\n    ['Finland',27],\r\n    ['Germany',680],\r\n    ['Greece',250],\r\n    ['Hungary',131],\r\n    ['Indonesia',1445],\r\n    ['Iraq',475],\r\n    ['Italy',4644],\r\n    ['Japan',889],\r\n    ['Kenya',200],\r\n    //['Korea',8316],\r\n    ['Malaysia',232],\r\n    ['Morocco',203],\r\n    ['Netherlands',1],\r\n    ['Nigeria',1031],\r\n    ['Panama',215],\r\n    ['Romania',2744],\r\n    ['South Africa',1108],\r\n    ['Sri Lanka',18],\r\n    ['Tanzania', 1427],\r\n    ['Thailand', 404],\r\n    ['Russia', 100004],\r\n    ['Uganda', 506],\r\n    ['United Kingdom', 442],\r\n    ['United States', 108487],\r\n    ['Uruguay', 31],\r\n    ['Zimbabwe', 515],\r\n    \r\n    \r\n  ]}\r\n\r\n  options={{\r\n    region: 'world',\r\n    colorAxis: { colors: ['orange','yellow', 'green','blue', 'darkblue', 'red'] },\r\n  }}\r\n  // need to get a mapsApiKey for project.\r\n  // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\r\n  mapsApiKey=\"YOUR_KEY_HERE\"\r\n // rootProps={{ 'data-testid': '1' }}\r\n/>\r\n</div>\r\n\r\n    )\r\n}\r\nexport default Smallpox;\r\n//adapted from https://www.youtube.com/watch?v=oX7Wqavzoc0","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Home.js",["107"],"export default ()=>\"Home\";","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Profile.js",["108"],"import { authService } from 'Components/Fbase';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst Out  = styled.button`\r\n    cursor: pointer;\r\n    border-radius: 20px;\r\n    border: none;\r\n    padding: 10px 0px;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    width: 150px;\r\n    background: white;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport default () => {\r\n\r\n    const onLogOutClick = () => authService.signOut();\r\n     \r\n    return <><Out onClick={onLogOutClick}>Log Out</Out></>;\r\n}","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\MersAndSars.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Upload.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Auth.js",["109","110"],"import { authService, firebaseInstance } from 'Components/Fbase';\r\nimport styled from 'styled-components';\r\nimport React, {useState} from 'react';\r\n\r\nconst Form = styled.form`\r\n    display:flex;\r\n`;\r\n\r\nconst Error = styled.h2`\r\n    color: tomato;\r\n    text-align: center;\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Box= styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst Sn = styled.span`\r\n    color: #04aaff;\r\n    cursor: pointer;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    display: block;\r\n    font-size: 18px;\r\n    text-decoration: underline;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    border-radius: 20px;\r\n    border: 1px solid black;\r\n    text-align: center;\r\n    background-color: white;\r\n    color: black;\r\n    box-sizing: content-box;\r\n`;\r\n\r\nconst Btn = styled.button`\r\n    cursor: pointer;\r\n    width: 300px;\r\n    padding: 7px 20px;\r\n    text-align: center;\r\n    color: white;\r\n    border-radius: 20px;\r\n    background-color: #04aaff;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target: { name, value},\r\n        } = event;\r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }else{\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }\r\n            console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount(prev => !prev);\r\n    const onSocialClick = async (event) => {\r\n        //console.log(event.target.name);\r\n        const {\r\n            target:{name}\r\n        } = event;\r\n\r\n        let provider;\r\n        if(name === \"google\"){\r\n            // Creates the provider object\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name == \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Form onSubmit={onSubmit}>\r\n                <Input \r\n                    name=\"email\" \r\n                    type=\"text\" \r\n                    placeholder=\"Email\" \r\n                    required \r\n                    value={email} \r\n                    onChange={onChange} \r\n                />\r\n                <Input \r\n                    name=\"password\"\r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password} \r\n                    onChange={onChange} \r\n                />\r\n                <Input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\" } />\r\n                <Error>{error}</Error>\r\n            </Form>\r\n            <Sn onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</Sn>\r\n            <Box>\r\n                <Btn onClick={onSocialClick} name=\"google\">Continue with Google</Btn>\r\n                <Btn onClick={onSocialClick} name=\"github\">Continue with Github</Btn>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default Auth;\r\n   ","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Routes\\Comparison.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper2.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\Components\\ChartWrapper.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\VirusDropdown.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\SymptomDropdown.js",[],"C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Piechart.js",["111","112","113","114"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst pie = d3.pie();\r\nconst data =\"https://comparison-b6dac-default-rtdb.firebaseio.com/Names.json\";\r\nexport default class D3Comparison{\r\n\r\n    constructor(element){\r\n\r\n            const width = 700   \r\n            const height = 300\r\n\r\n            var data = [63,37];\r\n\r\n            const svg = d3.select(element)\r\n            .append(\"svg\")\r\n                .attr(\"width\",width)\r\n                .attr(\"height\",height)\r\n\r\n            var svgg = d3.select(\"svg\"),\r\n                radius = Math.min(width, height) / 2,\r\n                g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\r\n\r\n             var color = d3.scaleOrdinal(['#ff7f00','#984ea3','#e41a1c']);\r\n\r\n            // Generate the pie\r\n            var pie = d3.pie()\r\n\r\n            // Generate the arcs\r\n            var arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(radius);\r\n\r\n            //Generate groups\r\n            var arcs = g.selectAll(\"arc\")\r\n                .data(pie(data))\r\n                .enter()\r\n                .append(\"g\")\r\n                .attr(\"class\", \"arc\")\r\n\r\n            //Draw arc paths\r\n            arcs.append(\"path\")\r\n                .attr(\"fill\", function(d, i) {\r\n                    return color(i);\r\n            })\r\n            .attr(\"d\", arc);\r\n\r\n            \r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + (width  - 430) + \",\" + 120 + \")\")\r\n               .append(\"text\")\r\n               .text(\"37%\")\r\n               .attr(\"class\", \"title\")\r\n               .attr(\"font-family\" , \"sans-serif\")\r\n               .attr(\"font-size\" , \"20px\")\r\n               .attr(\"fill\" , \"white\")\r\n\r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + (width  - 600) + \",\" + 120 + \")\")\r\n               .append(\"text\")\r\n               .text(\"WOMEN\")\r\n               .attr(\"class\", \"title\")\r\n               .attr(\"font-family\" , \"sans-serif\")\r\n               .attr(\"font-size\" , \"20px\")\r\n               .attr(\"fill\" , \"white\")\r\n\r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + (width  - 300) + \",\" + 150 + \")\")\r\n               .append(\"text\")\r\n               .text(\"63%\")\r\n               .attr(\"class\", \"title\")\r\n               .attr(\"font-family\" , \"sans-serif\")\r\n               .attr(\"font-size\" , \"20px\")\r\n               .attr(\"fill\" , \"white\")\r\n\r\n            svg.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + (width  - 180) + \",\" + 150 + \")\")\r\n               .append(\"text\")\r\n               .text(\"MEN\")\r\n               .attr(\"class\", \"title\")\r\n               .attr(\"font-family\" , \"sans-serif\")\r\n               .attr(\"font-size\" , \"20px\")\r\n               .attr(\"fill\" , \"white\")\r\n\r\n           \r\n            d3.select(element)\r\n               .append(\"div\")\r\n                 .style(\"border\", \"1px lightgray solid;\")\r\n                 .style(\"background-color\", \"#A52A2A\")\r\n                 .style(\"font\", \"20px sans-serif\")\r\n                 .text(\"Biological Sex is also a Risk-Factor\");\r\n \r\n             d3.select(element)\r\n               .append(\"div\")\r\n                 .style(\"border\", \"1px lightgray solid;\")\r\n                 .style(\"background-color\", \"#A52A2A\")\r\n                 .style(\"font\", \"20px sans-serif\")\r\n                 .text(\"% of COVID-19 deaths\");\r\n\r\n            /* \r\n        //added canvas\r\n        const svg = d3.select(element)\r\n            .append(\"svg\")\r\n                .attr(\"width\",1200)\r\n                .attr(\"height\",200)\r\n\r\n        const circles = svg.selectAll(\"circle\")\r\n            .data(data)\r\n\r\n        circles.enter().append(\"circle\")\r\n            .attr(\"cx\", (d, i) => (i*50)+50)\r\n            .attr(\"cy\", 150)\r\n            .attr(\"r\", d=>d)\r\n            .attr(\"fill\",\"#2F4F4F\")*/\r\n    }\r\n}","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3Comparison.js",["115","116","117","118"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://comparison-b6dac-default-rtdb.firebaseio.com/Names.json\";\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 1050 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\n\r\nconst MARGIN2 ={ TOP:10, BOTTOM:60, LEFT:60, RIGHT:10};\r\nconst WIDTH2 = 360 - MARGIN2.LEFT - MARGIN2.RIGHT;\r\nconst HEIGHT2 = 380 - MARGIN2.TOP - MARGIN2.BOTTOM;\r\n\r\nconst url2 =\"https://covid19symptom-default-rtdb.firebaseio.com/Names.json\";  //covid-19 symptom\r\nconst url3 =\"https://merssymptom-default-rtdb.firebaseio.com/Names.json\";  //mers\r\nconst url4 =\"https://sarssymptom-default-rtdb.firebaseio.com/Names.json\";  //sars\r\n\r\n\r\nexport default class D3Comparison{\r\n    constructor(element){\r\n      const vis = this;\r\n\r\n      // D3 code goes here--!\r\n      // Appending SVG canvas and moving into the center of the screen according to the D3 margin convension.\r\n      vis.svgg = d3.select(element)\r\n        .append(\"svg\")\r\n          .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n          .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n        .append(\"g\")\r\n          .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n      d3.select(element)\r\n        .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#A52A2A\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"This is preliminary COVID-19 data. While SARS and MERS' mortality rates are well understood, the definition of COVID-19 diagnoses is still shifting and it may be years until the actual number of cases is known.\");\r\n\r\n          \r\n        const svg = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const svg2 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const svg3 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"#2F4F4F\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"COVID-19 seems not to be very different from SARS regarding its clinical features. However, it has a fatality rate of 5.6%, lower than that of SARS (9.63%) and much lower than that of MERS (34.45%). While the mortality rate among COVID‐19 patients is lower than SARS and MERS, COVID‐19 is proving to have a higher contagious potency, resulting in a higher number of deaths\");\r\n        \r\n           vis.xLabel = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-410)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"gold\")\r\n            .style(\"fill\",\"gold\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"35px sans-serif\");\r\n\r\n          vis.xLabel2 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-380)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xLabel3 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-360)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xLabel4 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-340)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xLabel5 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-320)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xLabel6 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-300)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xLabel7 = vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.8)\r\n            .attr(\"y\", HEIGHT-280)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.svgg.append(\"text\")\r\n            .attr(\"x\", WIDTH/2)\r\n            .attr(\"y\", HEIGHT+50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .text(\"Symptoms\")\r\n            .style(\"stroke-width\", \".2px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.svgg.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Percentage (%) of patients with symptoms\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".2px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xAxisGroup = vis.svgg.append(\"g\")\r\n            .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n\r\n          vis.yAxisGroup = vis.svgg.append(\"g\")\r\n          //--------------\r\n\r\n\r\n        d3.json(url).then(comparison=>{\r\n            //using max function, it will loop through the data and get the highest number of y value\r\n            const max = d3.max(comparison, d=> d.Mortality)\r\n           \r\n            const min = d3.min(comparison, d=> d.Mortality) *0.55\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([min, max]) //highest y value\r\n                .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n            const x = d3.scaleBand()\r\n                .domain(comparison.map(d => d.Name))\r\n                .range([0,WIDTH2])  \r\n                .padding(0.2)\r\n\r\n            const xAxisCall = d3.axisBottom(x)\r\n            svg.append(\"g\")\r\n             .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n             .call(xAxisCall)\r\n\r\n            const yAxisCall = d3.axisLeft(y)\r\n            svg.append(\"g\").call(yAxisCall)\r\n\r\n\r\n            svg.append(\"text\")\r\n              .attr(\"x\",-(HEIGHT2/2))\r\n              .attr(\"y\",-40)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mortality Rate (%)\")\r\n              .attr(\"transform\",\"rotate(-90)\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"20px sans-serif\")\r\n              .style(\"pointer-events\", \"none\");\r\n\r\n            const rects = svg.selectAll(\"circle\")\r\n              .data(comparison)\r\n\r\n            rects.enter().append(\"circle\")\r\n              .attr(\"cx\", d=> x(d.Name) + (x.bandwidth() / 2))\r\n              .attr(\"cy\", d => y(d.Mortality))\r\n              //.attr(\"width\",x.bandwidth)\r\n              //.attr(\"height\", d => HEIGHT2 - y(d.Mortality))\r\n              .attr(\"r\",35)\r\n              .attr(\"fill\", d=>{\r\n                  if(d.Mortality > 20){\r\n                      return \"red\";\r\n                  }\r\n                  return \"green\";\r\n              })\r\n              .on(\"mouseover\", function() {\r\n                //Do something on mouseover of any bar\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"red\");\r\n              })\r\n              .on(\"mouseout\", function(d) {\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"#00315b\");\r\n              })\r\n              .append(\"title\")\r\n                .text(d=>`Mortality Rate : ${d.Mortality} % in ${d.Name}`);\r\n              \r\n\r\n            rects.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n              .attr(\"y\", d => y(d.Mortality))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Mortality))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>d.Mortality+ \" %\")\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"18px\")\r\n              .attr(\"fill\" , \"white\")\r\n        })//end first\r\n\r\n        d3.json(url).then(comparison2=>{\r\n          //using max function, it will loop through the data and get the highest number of y value\r\n          const max2 = d3.max(comparison2, d=> d.Deaths)\r\n          const min2 = d3.min(comparison2, d=> d.Deaths) *0.55\r\n\r\n          const y = d3.scaleLinear()\r\n              .domain([min2, max2]) //highest y value\r\n              .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n          const x = d3.scaleBand()\r\n              .domain(comparison2.map(d => d.Name))\r\n              .range([0,WIDTH2])  \r\n              .padding(0.2)\r\n\r\n          const xAxisCall2 = d3.axisBottom(x)\r\n          svg2.append(\"g\")\r\n           .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n           .call(xAxisCall2)\r\n\r\n          const yAxisCall2 = d3.axisLeft(y)\r\n          svg2.append(\"g\").call(yAxisCall2)\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 + 50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Comparisons between the viruses were made\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          svg2.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT2/2))\r\n            .attr(\"y\",-45)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Number of Deaths\")\r\n            .attr(\"transform\",\"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          const rects2 = svg2.selectAll(\"rect\")\r\n          .data(comparison2)\r\n\r\n          rects2.enter().append(\"circle\")\r\n            .attr(\"cx\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n            .attr(\"cy\", d => y(d.Deaths))\r\n            .attr(\"r\",35)\r\n            //.attr(\"width\",x.bandwidth)\r\n            //.attr(\"height\", d => HEIGHT2 - y(d.Deaths))\r\n            .attr(\"fill\", d=>{\r\n                if(d.Deaths > 1000){\r\n                    return \"red\";\r\n                }\r\n                return \"green\";\r\n            })\r\n            .on(\"mouseover\", function() {\r\n              //Do something on mouseover of any bar\r\n              d3.select(this)\r\n                .attr(\"fill\", \"red\");\r\n            })\r\n            .on(\"mouseout\", function(d) {\r\n              d3.select(this)\r\n                .attr(\"fill\", \"#00315b\");\r\n            })\r\n            .append(\"title\")\r\n              .text(d=>`Number of Deaths : ${d.Deaths}  in ${d.Name}`);\r\n\r\n            rects2.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n              .attr(\"y\", d => y(d.Deaths))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Deaths))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>\"No. \"+d.Deaths)\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"18px\")\r\n              .attr(\"fill\" , \"white\")\r\n      })//end second\r\n\r\n      d3.json(url).then(comparison3=>{\r\n        //using max function, it will loop through the data and get the highest number of y value\r\n        const max3 = d3.max(comparison3, d=> d.Cases)\r\n        const min3 = d3.min(comparison3, d=> d.Cases) *0.55\r\n\r\n        const y = d3.scaleLinear()\r\n            .domain([min3, max3]) //highest y value\r\n            .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n        const x = d3.scaleBand()\r\n            .domain(comparison3.map(d => d.Name))\r\n            .range([0,WIDTH2])  \r\n            .padding(0.2)\r\n\r\n        const xAxisCall3 = d3.axisBottom(x)\r\n        svg3.append(\"g\")\r\n         .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n         .call(xAxisCall3)\r\n\r\n        const yAxisCall3 = d3.axisLeft(y)\r\n        svg3.append(\"g\").call(yAxisCall3)\r\n\r\n\r\n        svg3.append(\"text\")\r\n          .attr(\"x\",-(HEIGHT2/2))\r\n          .attr(\"y\",-45)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"Number of Cases\")\r\n          .attr(\"transform\",\"rotate(-90)\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"font\", \"20px sans-serif\");\r\n          \r\n\r\n        const rects3 = svg3.selectAll(\"circle\")\r\n        .data(comparison3)\r\n\r\n        rects3.enter().append(\"circle\")\r\n          .attr(\"cx\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n          .attr(\"cy\", d => y(d.Cases))\r\n          .attr(\"r\",35)\r\n          //.attr(\"width\",x.bandwidth)\r\n          //.attr(\"height\", d => HEIGHT2 - y(d.Cases))\r\n          .attr(\"fill\", d=>{\r\n              if(d.Cases > 10000){\r\n                  return \"red\";\r\n              }\r\n              return \"green\";\r\n          })\r\n          .on(\"mouseover\", function() {\r\n            //Do something on mouseover of any bar\r\n            d3.select(this)\r\n              .attr(\"fill\", \"red\");\r\n          })\r\n          .on(\"mouseout\", function(d) {\r\n            d3.select(this)\r\n              .attr(\"fill\", \"#00315b\");\r\n          })\r\n          .append(\"title\")\r\n            .text(d=>`Number of Cases : ${d.Cases}  in ${d.Name}`);\r\n          \r\n\r\n          rects3.enter().append(\"text\")\r\n              .attr(\"class\", \"value\")\r\n              .attr(\"x\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n              .attr(\"y\", d => y(d.Cases))\r\n              .attr(\"dy\", \".35em\") //vertical align middle\r\n              .attr(\"width\",x.bandwidth)\r\n              .attr(\"height\", d => HEIGHT2 - y(d.Cases))\r\n              .attr(\"text-anchor\", \"middle\")\r\n              .text(d=>\"No. \"+d.Cases)\r\n              .attr(\"font-family\" , \"sans-serif\")\r\n              .attr(\"font-size\" , \"18px\")\r\n              .attr(\"fill\" , \"white\")\r\n    })//end third\r\n    \r\n    Promise.all([\r\n      d3.json(\"https://covid19symptom-default-rtdb.firebaseio.com/Names.json\"),\r\n      d3.json(\"https://merssymptom-default-rtdb.firebaseio.com/Names.json\"),\r\n      d3.json(\"https://sarssymptom-default-rtdb.firebaseio.com/Names.json\")\r\n    ]).then((datasets)=>{\r\n\r\n      vis.Covid19Data=datasets[0]\r\n      vis.MersData=datasets[1]\r\n      vis.SarsData=datasets[2]\r\n\r\n      console.log(vis.Covid19Data)\r\n      console.log(vis.MersData)\r\n      console.log(vis.SarsData)\r\n      vis.update(\"covid19\")\r\n      \r\n  })\r\n}\r\n\r\n// This update() method gets called you change your data.\r\nupdate(virus){\r\nconst vis = this;\r\n\r\nvis.data = (virus === \"covid19\") ? vis.Covid19Data : (virus === \"mers\") ? vis.MersData : vis.SarsData;\r\nvis.xLabel.text(`${virus} symptoms`)  \r\nvis.xLabel2.text(`Shortness of breath was less common in COVID‐19 patients (17%),`)  \r\nvis.xLabel3.text(`in comparison to SARS (32%) and MERS (51%). `)  \r\nvis.xLabel4.text(`Likewise, chills were less common in COVID‐19 patients (17%), `)  \r\nvis.xLabel5.text(`in comparison to SARS (57.5%) and MERS (41%). `) \r\nvis.xLabel6.text(`Therefore, these clinical symptoms should help distinguish`)  \r\nvis.xLabel7.text(`the various coronavirus infections from each other. `) \r\n\r\n\r\n\r\n//using max function, it will loop through the data and get the highest number of y value.\r\nconst max = d3.max(vis.data, d=> d.Number)\r\nconst min = d3.min(vis.data, d=> d.Number) *0.95\r\n\r\nconst y = d3.scaleLinear()\r\n    .domain([min, max]) //highest y value.\r\n    .range([HEIGHT,0]) //minimum and maximum value .\r\n    \r\n\r\n// Create the scale\r\nconst x = d3.scaleBand()\r\n    .domain(vis.data.map(d => d.Name))\r\n    .range([0,WIDTH])  \r\n    .padding(0.4)\r\n\r\nconst xAxisCall = d3.axisBottom(x)\r\n  vis.xAxisGroup.transition().duration(500).call(xAxisCall)\r\n\r\nconst yAxisCall = d3.axisLeft(y)\r\n vis.yAxisGroup.transition().duration(500).call(yAxisCall)\r\n\r\n// DATA JOIN\r\nconst rects = vis.svgg.selectAll(\"rect\")\r\n      .data(vis.data)\r\n\r\n// EXIT\r\nrects.exit()\r\n  .transition().duration(500)\r\n    .attr(\"height\", 0)\r\n    .attr(\"y\", HEIGHT)\r\n    .remove()\r\n\r\n// UPDATE\r\nrects.transition().duration(500)\r\n  .attr(\"x\", d => x(d.Name))\r\n  .attr(\"y\", d => y(d.Number))\r\n  .attr(\"width\", x.bandwidth)\r\n  .attr(\"height\", d => HEIGHT-y(d.Number))\r\n\r\n\r\n// ENTER\r\nrects.enter().append(\"rect\")\r\n  .attr(\"x\", d => x(d.Name))\r\n  .attr(\"width\", x.bandwidth)\r\n  //.attr(\"fill\", \"#69b3a2\")\r\n  .attr(\"y\",HEIGHT)\r\n  .transition().duration(500)\r\n  .attr(\"height\", d => HEIGHT-y(d.Number))\r\n  .attr(\"y\", d => y(d.Number))\r\n  .style(\"padding\", \"3px\")\r\n  .style(\"margin\", \"1px\")\r\n  .style(\"width\", d => `${d * 10}px`)\r\n  .text(d => d)\r\n  .attr(\"fill\", \"#008B8B\")\r\n  .attr(\"stroke\", \"#D3D3D3\")\r\n  .attr(\"stroke-width\", 3)\r\n\r\nrects.enter().append(\"text\")\r\n  .attr(\"class\", \"value\")\r\n  .attr(\"x\", d=> x(d.Name)+ (x.bandwidth() / 2))\r\n  .attr(\"y\", d => y(d.Number))\r\n  .attr(\"dx\", -5)\r\n  .attr(\"dy\", \".35em\") //vertical align middle\r\n  .attr(\"text-anchor\", \"middle\")\r\n  .text(d=>d.Number+ \" %\")\r\n  .attr(\"fill\" , \"red\")\r\n  .style(\"font\", \"22px sans-serif\");\r\n    \r\n  \r\n\r\n}\r\n}","C:\\Users\\Grace Keane\\Desktop\\GroupProject\\Final-Year-Project-Data-Visualization\\src\\D3\\D3MersSars.js",["119","120","121","122","123"],"import * as d3 from 'd3';\r\nimport { svg } from 'd3';\r\n\r\nconst url =\"https://merssummary-default-rtdb.firebaseio.com/Names.json\";  // == Mers data.\r\nconst url2 = \"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\";  // == Sars data.\r\nconst mersCountry = \"https://reactproject1-3472c-default-rtdb.firebaseio.com/MersCountry.json\";\r\nconst sarsCountry = \"https://reactproject11-c3541-default-rtdb.firebaseio.com/SarsCountry.json\";\r\nconst sarsOutbreak =\"https://sarsoutbreak-7f6ec-default-rtdb.firebaseio.com/SarsOutbreak.json\";\r\n\r\nconst MARGIN ={ TOP:10, BOTTOM:60, LEFT:70, RIGHT:10};\r\nconst WIDTH = 1100 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT = 620 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nconst WIDTH2 = 1100 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT2 = 500 - MARGIN.TOP - MARGIN.BOTTOM;\r\nconst MARGIN2 ={ TOP:10, BOTTOM:60, LEFT:60, RIGHT:10};\r\n\r\nconst WIDTH3 = 560 - MARGIN.LEFT - MARGIN.RIGHT;\r\nconst HEIGHT3 = 400 - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\nexport default class D3Comparison{\r\n    // This constructor function gets called only once when you first load up this visualization.\r\n    constructor(element){\r\n        const vis = this;\r\n\r\n        vis.svg = d3.select(element)  // Select element on the page with D3 select\r\n          .append(\"svg\")  // Add elements onto a selection with the D3 append method\r\n            .attr(\"width\",WIDTH + MARGIN.LEFT + MARGIN.RIGHT)  // Attr method to set attributes of these elements\r\n            .attr(\"height\",HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\r\n\r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"#2F4F4F\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"Since April 2012 and as of 12 January 2021, 2 581 cases of MERS-CoV, including 935 deaths,have been reported by health authorities worldwide.\");\r\n          \r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"#696969\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"SARS was first reported in Asia in February 2003. The illness spread to 29 countries, where 8,437 people got SARS and 774 of them died. The last known case of SARS was in 2004.\");\r\n          \r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"#2F4F4F\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"(It means the virus killed roughly one in 10 people who were infected.)\")\r\n\r\n        const svg2 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const tsvg2 = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"Middle East had the highest number cases (88.4%), followed by Asia (10.7%), Europe (0.8%) and USA with only 2 cases officially reported (0.1%).\");\r\n\r\n        const svg3 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH2 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT2 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const tsvg3 = d3.select(element)\r\n          .append(\"div\")\r\n          .style(\"border\", \"1px lightgray solid;\")\r\n          .style(\"background-color\", \"#708090\")\r\n          .style(\"font\", \"20px sans-serif\")\r\n          .text(\"The majority of SARS cases were from China, Canada and Singapore, among which, cases from China mainland presented the largest proportion, followed by that from Hong Kong and Taiwan.\");\r\n\r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"orange\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"features are compared in 5 main areas. (China, Hong Kong, Taiwan, Singapore, Canada)\")\r\n\r\n          \r\n        const svg4 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH3 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT3 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const svg5 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH3 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT3 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        d3.select(element)\r\n          .append(\"div\")\r\n            .style(\"border\", \"1px lightgray solid;\")\r\n            .style(\"background-color\", \"#2F4F4F\")\r\n            .style(\"font\", \"20px sans-serif\")\r\n            .text(\"China has the most infected cases and deaths, yet the lowest mortality rate.\")\r\n\r\n              \r\n        const svg6 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH3 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT3 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n        const svg7 = d3.select(element)\r\n          .append(\"svg\")\r\n            .attr(\"width\",WIDTH3 + MARGIN2.LEFT + MARGIN2.RIGHT)\r\n            .attr(\"height\",HEIGHT3 + MARGIN2.TOP + MARGIN2.BOTTOM)\r\n          .append(\"g\")\r\n            .attr(\"transform\", `translate(${MARGIN2.LEFT}, ${MARGIN2.TOP})`)\r\n\r\n              \r\n          vis.xLabel = vis.svg.append(\"text\")\r\n            .attr(\"x\", WIDTH/1.7)\r\n            .attr(\"y\", HEIGHT-300)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .style(\"stroke\", \"gold\")\r\n            .style(\"fill\",\"gold\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"35px sans-serif\");\r\n\r\n          vis.svg.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT/2))\r\n            .attr(\"y\",-50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Number of reported cases\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".2px\")\r\n            .style(\"font\", \"20px sans-serif\");\r\n\r\n          vis.xAxisGroup = vis.svg.append(\"g\")\r\n            .attr(\"transform\",`translate(0, ${ HEIGHT })`)\r\n\r\n          vis.yAxisGroup = vis.svg.append(\"g\")\r\n\r\n\r\n\r\n          // Mers - Country\r\n          d3.json(mersCountry).then(comparison2=>{\r\n            //using max function, it will loop through the data and get the highest number of y value\r\n            const max2 = d3.max(comparison2, d=> d.Confirmed)\r\n            const min2 = d3.min(comparison2, d=> d.Confirmed) *0.55\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([min2, max2]) //highest y value\r\n                .range([HEIGHT2,0]) //minimum and maximum value \r\n\r\n            const x = d3.scaleBand()\r\n                .domain(comparison2.map(d => d.Country))\r\n                .range([0,WIDTH2])  \r\n                .padding(0.2)\r\n\r\n            const xAxisCall2 = d3.axisBottom(x)\r\n            svg2.append(\"g\")\r\n             .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n             .call(xAxisCall2)\r\n             .selectAll(\"text\")\r\n             .attr(\"y\", 0)\r\n             .attr(\"x\", 9)\r\n             .attr(\"dy\", \".35em\")\r\n             .attr(\"transform\", \"rotate(50)\")\r\n             .style(\"fill\",\"gold\")\r\n             .style(\"font\", \"15px sans-serif\")\r\n             .style(\"text-anchor\", \"start\");\r\n\r\n\r\n            const yAxisCall2 = d3.axisLeft(y)\r\n            svg2.append(\"g\").call(yAxisCall2)\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 + 50)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mers - Country\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"text-decoration\", \"underline\") \r\n              .style(\"font\", \"15px sans-serif\");\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 - 320)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Mers\")\r\n              .style(\"stroke\", \"gold\")\r\n              .style(\"fill\",\"gold\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"35px sans-serif\");\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 - 270)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"First identified in Saudi Arabia in 2012.\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"17px sans-serif\");\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\", WIDTH2/2)\r\n              .attr(\"y\", HEIGHT2 - 250)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"Since 2012, MERS has been reported in 27 countries\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"17px sans-serif\");\r\n\r\n            svg2.append(\"text\")\r\n              .attr(\"x\",-(HEIGHT2/2))\r\n              .attr(\"y\",-40)\r\n              .attr(\"text-anchor\",\"middle\")\r\n              .text(\"No. of Confirmed Cases\")\r\n              .attr(\"transform\",\"rotate(-90)\")\r\n              .style(\"stroke\", \"white\")\r\n              .style(\"fill\",\"white\")\r\n              .style(\"stroke-width\", \".4px\")\r\n              .style(\"font\", \"15px sans-serif\");\r\n\r\n            // Add the line\r\n            svg2.append(\"path\")\r\n            .datum(comparison2)\r\n            .attr(\"fill\", \"grey\")\r\n            .attr(\"stroke\", \"blue\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", d3.line()\r\n              .x(function(d) { return x(d.Country) })\r\n              .y(function(d) { return y(d.Confirmed) })\r\n            )\r\n            // Add the points\r\n\r\n            const rects2 = svg2.selectAll(\"circle\")\r\n            .data(comparison2)\r\n\r\n            rects2.enter().append(\"circle\")\r\n              .attr(\"cx\", d=> x(d.Country))\r\n              .attr(\"cy\", d => y(d.Confirmed))\r\n              .attr(\"r\",20)\r\n              //.attr(\"width\",x.bandwidth)\r\n              //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n              //.attr(\"fill\", \"red\")\r\n              .attr(\"fill\", d=>{\r\n                if(d.Confirmed > 2000){\r\n                    return \"red\";\r\n                }\r\n                return \"green\";\r\n              })\r\n              .on(\"mouseover\", function() {\r\n                //Do something on mouseover of any bar\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n              })\r\n              .on(\"mouseout\", function(d) {\r\n                d3.select(this)\r\n                  .attr(\"fill\", \"red\");\r\n              })\r\n              .append(\"title\")\r\n                .text(d=>`Number of Confirmed Cases : ${d.Confirmed}  in ${d.Country}`);\r\n\r\n                \r\n          rects2.enter().append(\"text\")\r\n            .attr(\"class\", \"value\")\r\n            .attr(\"x\", d=> x(d.Country))\r\n            .attr(\"y\", d => y(d.Confirmed))\r\n            .attr(\"dy\", \".35em\") //vertical align middle\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT - y(d.Confirmed))\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(d=>\"No. \"+ d.Confirmed)\r\n            .attr(\"font-family\" , \"sans-serif\")\r\n            .attr(\"font-size\" , \"10px\")\r\n            .attr(\"fill\" , \"white\")\r\n        })// End Mers - Country\r\n\r\n        // Start Sars - Country\r\n        d3.json(sarsCountry).then(comparison3=>{\r\n          //using max function, it will loop through the data and get the highest number of y value\r\n          const max3 = d3.max(comparison3, d=> d.Confirmed)\r\n          const min3 = d3.min(comparison3, d=> d.Confirmed) *0.55\r\n  \r\n          const y = d3.scaleLinear()\r\n              .domain([min3, max3]) //highest y value\r\n              .range([HEIGHT2,0]) //minimum and maximum value \r\n  \r\n          const x = d3.scaleBand()\r\n              .domain(comparison3.map(d => d.Country))\r\n              .range([0,WIDTH2])  \r\n              .padding(0.2)\r\n  \r\n          const xAxisCall3 = d3.axisBottom(x)\r\n          svg3.append(\"g\")\r\n           .attr(\"transform\",`translate(0, ${ HEIGHT2 })`)\r\n           .call(xAxisCall3)\r\n           .selectAll(\"text\")\r\n             .attr(\"y\", 0)\r\n             .attr(\"x\", 9)\r\n             .attr(\"dy\", \".35em\")\r\n             .attr(\"transform\", \"rotate(50)\")\r\n             .style(\"fill\",\"gold\")\r\n             .style(\"font\", \"15px sans-serif\")\r\n             .style(\"text-anchor\", \"start\");\r\n  \r\n          const yAxisCall3 = d3.axisLeft(y)\r\n          svg3.append(\"g\").call(yAxisCall3)\r\n  \r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 + 50)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Sars - Country\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"text-decoration\", \"underline\") \r\n            .style(\"font\", \"15px sans-serif\");\r\n\r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 - 340)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"Sars\")\r\n            .style(\"stroke\", \"gold\")\r\n            .style(\"fill\",\"gold\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"35px sans-serif\");\r\n            \r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 - 290)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"8,098 cases, resulting in 774 deaths reported in\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"17px sans-serif\");\r\n\r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 - 270)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"17 countries (9.6% fatality rate), with the majority of cases in mainland China and Hong Kong.\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"17px sans-serif\");\r\n\r\n          svg3.append(\"text\")\r\n            .attr(\"x\", WIDTH2/2)\r\n            .attr(\"y\", HEIGHT2 - 250)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No cases of SARS have been reported worldwide since 2004.\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"17px sans-serif\");\r\n\r\n          svg3.append(\"text\")\r\n            .attr(\"x\",-(HEIGHT2/2))\r\n            .attr(\"y\",-40)\r\n            .attr(\"text-anchor\",\"middle\")\r\n            .text(\"No. of Confirmed Cases\")\r\n            .attr(\"transform\",\"rotate(-90)\")\r\n            .style(\"stroke\", \"white\")\r\n            .style(\"fill\",\"white\")\r\n            .style(\"stroke-width\", \".4px\")\r\n            .style(\"font\", \"15px sans-serif\");\r\n            \r\n          // Add the line\r\n          svg3.append(\"path\")\r\n          .datum(comparison3)\r\n          .attr(\"fill\", \"grey\")\r\n          .attr(\"stroke\", \"white\")\r\n          .attr(\"stroke-width\", 1.5)\r\n          .attr(\"d\", d3.line()\r\n            .x(function(d) { return x(d.Country) })\r\n            .y(function(d) { return y(d.Confirmed) })\r\n          )\r\n          // Add the points\r\n\r\n\r\n          const rects3 = svg3.selectAll(\"circle\")\r\n          .data(comparison3)\r\n  \r\n          rects3.enter().append(\"circle\")\r\n            .attr(\"cx\", d=> x(d.Country))\r\n            .attr(\"cy\", d => y(d.Confirmed))\r\n            .attr(\"r\",20)\r\n            //.attr(\"width\",x.bandwidth)\r\n            //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n            //.attr(\"fill\", \"red\")\r\n            .attr(\"fill\", d=>{\r\n              if(d.Confirmed > 5000){\r\n                  return \"red\";\r\n              }\r\n              return \"green\";\r\n            })\r\n            .on(\"mouseover\", function() {\r\n              //Do something on mouseover of any bar\r\n              d3.select(this)\r\n                .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n            })\r\n            .on(\"mouseout\", function(d) {\r\n              d3.select(this)\r\n                .attr(\"fill\", \"red\");\r\n            })\r\n            .append(\"title\")\r\n              .text(d=>`Number of Confirmed Cases : ${d.Confirmed}  in ${d.Country}`);\r\n\r\n            rects3.enter().append(\"text\")\r\n            .attr(\"class\", \"value\")\r\n            .attr(\"x\", d=> x(d.Country))\r\n            .attr(\"y\", d => y(d.Confirmed))\r\n            .attr(\"dy\", \".35em\") //vertical align middle\r\n            .attr(\"width\",x.bandwidth)\r\n            .attr(\"height\", d => HEIGHT - y(d.Confirmed))\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .text(d=>\"No. \"+ d.Confirmed)\r\n            .attr(\"font-family\" , \"sans-serif\")\r\n            .attr(\"font-size\" , \"10px\")\r\n            .attr(\"fill\" , \"white\")\r\n      })//end third\r\n\r\n      // Sars - outbreak1\r\n      d3.json(sarsOutbreak).then(outbreak1=>{\r\n        //using max function, it will loop through the data and get the highest number of y value\r\n        const max2 = d3.max(outbreak1, d=> d.Cases)\r\n        const min2 = d3.min(outbreak1, d=> d.Cases) *0.55\r\n\r\n        const y = d3.scaleLinear()\r\n            .domain([min2, max2]) //highest y value\r\n            .range([HEIGHT3,0]) //minimum and maximum value \r\n\r\n        const x = d3.scaleBand()\r\n            .domain(outbreak1.map(d => d.Country))\r\n            .range([0,WIDTH3])  \r\n            .padding(0.2)\r\n\r\n        const xAxisCall2 = d3.axisBottom(x)\r\n        svg4.append(\"g\")\r\n         .attr(\"transform\",`translate(0, ${ HEIGHT3 })`)\r\n         .call(xAxisCall2)\r\n         .selectAll(\"text\")\r\n         .attr(\"y\", 0)\r\n         .attr(\"x\", 9)\r\n         .attr(\"dy\", \".35em\")\r\n         .attr(\"transform\", \"rotate(30)\")\r\n         .style(\"fill\",\"white\")\r\n         .style(\"font\", \"15px sans-serif\")\r\n         .style(\"text-anchor\", \"start\");\r\n\r\n\r\n        const yAxisCall2 = d3.axisLeft(y)\r\n        svg4.append(\"g\").call(yAxisCall2)\r\n\r\n        svg4.append(\"text\")\r\n          .attr(\"x\", WIDTH3/2)\r\n          .attr(\"y\", HEIGHT3 - 150)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"Sars no. of total infected cases from main countries\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"font\", \"15px sans-serif\");\r\n\r\n        svg4.append(\"text\")\r\n          .attr(\"x\",-(HEIGHT3/2))\r\n          .attr(\"y\",-40)\r\n          .attr(\"text-anchor\",\"middle\")\r\n          .text(\"No. of Total Infected\")\r\n          .attr(\"transform\",\"rotate(-90)\")\r\n          .style(\"stroke\", \"white\")\r\n          .style(\"fill\",\"white\")\r\n          .style(\"stroke-width\", \".4px\")\r\n          .style(\"font\", \"15px sans-serif\");\r\n\r\n        // Add the line\r\n        svg4.append(\"path\")\r\n        .datum(outbreak1)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"white\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"d\", d3.line()\r\n          .x(function(d) { return x(d.Country) + (x.bandwidth() / 2) })\r\n          .y(function(d) { return y(d.Cases) })\r\n        )\r\n        // Add the points\r\n\r\n        const rects2 = svg4.selectAll(\"circle\")\r\n        .data(outbreak1)\r\n\r\n        rects2.enter().append(\"circle\")\r\n          .attr(\"cx\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n          .attr(\"cy\", d => y(d.Cases))\r\n          .attr(\"r\",5)\r\n          //.attr(\"width\",x.bandwidth)\r\n          //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n          //.attr(\"fill\", \"red\")\r\n          .attr(\"fill\",\"red\")\r\n          .on(\"mouseover\", function() {\r\n            //Do something on mouseover of any bar\r\n            d3.select(this)\r\n              .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n          })\r\n          .on(\"mouseout\", function(d) {\r\n            d3.select(this)\r\n              .attr(\"fill\", \"red\");\r\n          })\r\n          .append(\"title\")\r\n            .text(d=>`Number of Confirmed Cases : ${d.Cases}  in ${d.Country}`);\r\n\r\n            \r\n      rects2.enter().append(\"text\")\r\n        .attr(\"class\", \"value\")\r\n        .attr(\"x\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n        .attr(\"y\", d => y(d.Cases))\r\n        .attr(\"dy\", \".35em\") //vertical align middle\r\n        .attr(\"width\",x.bandwidth)\r\n        .attr(\"height\", d => HEIGHT - y(d.Cases))\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .text(d=>\"No. \"+ d.Cases)\r\n        .attr(\"font-family\" , \"sans-serif\")\r\n        .attr(\"font-size\" , \"10px\")\r\n        .attr(\"fill\" , \"white\")\r\n    })// End Sars outbreak 1\r\n\r\n  \r\n    // Sars - outbreak2\r\n    d3.json(sarsOutbreak).then(outbreak2=>{\r\n      //using max function, it will loop through the data and get the highest number of y value\r\n      const max2 = d3.max(outbreak2, d=> d.Deaths)\r\n      const min2 = d3.min(outbreak2, d=> d.Deaths) *0.55\r\n\r\n      const y = d3.scaleLinear()\r\n          .domain([min2, max2]) //highest y value\r\n          .range([HEIGHT3,0]) //minimum and maximum value \r\n\r\n      const x = d3.scaleBand()\r\n          .domain(outbreak2.map(d => d.Country))\r\n          .range([0,WIDTH3])  \r\n          .padding(0.2)\r\n\r\n      const xAxisCall2 = d3.axisBottom(x)\r\n      svg5.append(\"g\")\r\n       .attr(\"transform\",`translate(0, ${ HEIGHT3 })`)\r\n       .call(xAxisCall2)\r\n       .selectAll(\"text\")\r\n       .attr(\"y\", 0)\r\n       .attr(\"x\", 9)\r\n       .attr(\"dy\", \".35em\")\r\n       .attr(\"transform\", \"rotate(30)\")\r\n       .style(\"fill\",\"white\")\r\n       .style(\"font\", \"15px sans-serif\")\r\n       .style(\"text-anchor\", \"start\");\r\n\r\n\r\n      const yAxisCall2 = d3.axisLeft(y)\r\n      svg5.append(\"g\").call(yAxisCall2)\r\n\r\n      svg5.append(\"text\")\r\n        .attr(\"x\", WIDTH3/2)\r\n        .attr(\"y\", HEIGHT3 - 240)\r\n        .attr(\"text-anchor\",\"middle\")\r\n        .text(\"Sars no. of total Deaths cases from main countries\")\r\n        .style(\"stroke\", \"red\")\r\n        .style(\"fill\",\"red\")\r\n        .style(\"stroke-width\", \".4px\")\r\n        .style(\"font\", \"15px sans-serif\");\r\n\r\n      svg5.append(\"text\")\r\n        .attr(\"x\", WIDTH3/2)\r\n        .attr(\"y\", HEIGHT3 - 200)\r\n        .attr(\"text-anchor\",\"middle\")\r\n        .text(\"China has the most infected cases and deaths\")\r\n        .style(\"stroke\", \"white\")\r\n        .style(\"fill\",\"white\")\r\n        .style(\"stroke-width\", \".4px\")\r\n        .style(\"font\", \"15px sans-serif\");\r\n\r\n      svg5.append(\"text\")\r\n        .attr(\"x\",-(HEIGHT3/2))\r\n        .attr(\"y\",-40)\r\n        .attr(\"text-anchor\",\"middle\")\r\n        .text(\"No. of Total Deaths\")\r\n        .attr(\"transform\",\"rotate(-90)\")\r\n        .style(\"stroke\", \"white\")\r\n        .style(\"fill\",\"white\")\r\n        .style(\"stroke-width\", \".4px\")\r\n        .style(\"font\", \"15px sans-serif\");\r\n\r\n      // Add the line\r\n      svg5.append(\"path\")\r\n      .datum(outbreak2)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"red\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .attr(\"d\", d3.line()\r\n        .x(function(d) { return x(d.Country) + (x.bandwidth() / 2) })\r\n        .y(function(d) { return y(d.Deaths) })\r\n      )\r\n      // Add the points\r\n\r\n      const rects2 = svg5.selectAll(\"circle\")\r\n      .data(outbreak2)\r\n\r\n      rects2.enter().append(\"circle\")\r\n        .attr(\"cx\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n        .attr(\"cy\", d => y(d.Deaths))\r\n        .attr(\"r\",5)\r\n        //.attr(\"width\",x.bandwidth)\r\n        //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n        //.attr(\"fill\", \"red\")\r\n        .attr(\"fill\",\"red\")\r\n        .on(\"mouseover\", function() {\r\n          //Do something on mouseover of any bar\r\n          d3.select(this)\r\n            .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n        })\r\n        .on(\"mouseout\", function(d) {\r\n          d3.select(this)\r\n            .attr(\"fill\", \"red\");\r\n        })\r\n        .append(\"title\")\r\n          .text(d=>`Number of Confirmed Cases : ${d.Deaths}  in ${d.Country}`);\r\n\r\n          \r\n    rects2.enter().append(\"text\")\r\n      .attr(\"class\", \"value\")\r\n      .attr(\"x\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n      .attr(\"y\", d => y(d.Deaths))\r\n      .attr(\"dy\", \".35em\") //vertical align middle\r\n      .attr(\"width\",x.bandwidth)\r\n      .attr(\"height\", d => HEIGHT - y(d.Deaths))\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .text(d=>\"No. \"+ d.Deaths)\r\n      .attr(\"font-family\" , \"sans-serif\")\r\n      .attr(\"font-size\" , \"10px\")\r\n      .attr(\"fill\" , \"white\")\r\n  })// End Sars outbreak 2\r\n\r\n  // Sars - outbreak3\r\n  d3.json(sarsOutbreak).then(outbreak3=>{\r\n    //using max function, it will loop through the data and get the highest number of y value\r\n    const max2 = d3.max(outbreak3, d=> d.Recovered)\r\n    const min2 = d3.min(outbreak3, d=> d.Recovered) *0.55\r\n\r\n    const y = d3.scaleLinear()\r\n        .domain([min2, max2]) //highest y value\r\n        .range([HEIGHT3,0]) //minimum and maximum value \r\n\r\n    const x = d3.scaleBand()\r\n        .domain(outbreak3.map(d => d.Country))\r\n        .range([0,WIDTH3])  \r\n        .padding(0.2)\r\n\r\n    const xAxisCall2 = d3.axisBottom(x)\r\n    svg6.append(\"g\")\r\n     .attr(\"transform\",`translate(0, ${ HEIGHT3 })`)\r\n     .call(xAxisCall2)\r\n     .selectAll(\"text\")\r\n     .attr(\"y\", 0)\r\n     .attr(\"x\", 9)\r\n     .attr(\"dy\", \".35em\")\r\n     .attr(\"transform\", \"rotate(30)\")\r\n     .style(\"fill\",\"white\")\r\n     .style(\"font\", \"15px sans-serif\")\r\n     .style(\"text-anchor\", \"start\");\r\n\r\n\r\n    const yAxisCall2 = d3.axisLeft(y)\r\n    svg6.append(\"g\").call(yAxisCall2)\r\n\r\n    svg6.append(\"text\")\r\n      .attr(\"x\", WIDTH3/2)\r\n      .attr(\"y\", HEIGHT3 - 240)\r\n      .attr(\"text-anchor\",\"middle\")\r\n      .text(\"Sars no. of total Recovered cases from confirmed cases\")\r\n      .style(\"stroke\", \"green\")\r\n      .style(\"fill\",\"green\")\r\n      .style(\"stroke-width\", \".4px\")\r\n      .style(\"font\", \"15px sans-serif\");\r\n\r\n    svg6.append(\"text\")\r\n      .attr(\"x\", WIDTH3/2)\r\n      .attr(\"y\", HEIGHT3 - 200)\r\n      .attr(\"text-anchor\",\"middle\")\r\n      .text(\"Hong Kong and Singapore present good cured rates,\")\r\n      .style(\"stroke\", \"white\")\r\n      .style(\"fill\",\"white\")\r\n      .style(\"stroke-width\", \".4px\")\r\n      .style(\"font\", \"15px sans-serif\");\r\n\r\n    svg6.append(\"text\")\r\n      .attr(\"x\", WIDTH3/2)\r\n      .attr(\"y\", HEIGHT3 - 180)\r\n      .attr(\"text-anchor\",\"middle\")\r\n      .text(\"which are more than 82%, with China’s at 92.9%. \")\r\n      .style(\"stroke\", \"white\")\r\n      .style(\"fill\",\"white\")\r\n      .style(\"stroke-width\", \".4px\")\r\n      .style(\"font\", \"15px sans-serif\");\r\n\r\n    svg6.append(\"text\")\r\n      .attr(\"x\",-(HEIGHT3/2))\r\n      .attr(\"y\",-40)\r\n      .attr(\"text-anchor\",\"middle\")\r\n      .text(\"No. of Total Recovered Cases\")\r\n      .attr(\"transform\",\"rotate(-90)\")\r\n      .style(\"stroke\", \"white\")\r\n      .style(\"fill\",\"white\")\r\n      .style(\"stroke-width\", \".4px\")\r\n      .style(\"font\", \"15px sans-serif\");\r\n\r\n    // Add the line\r\n    svg6.append(\"path\")\r\n    .datum(outbreak3)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"green\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .attr(\"d\", d3.line()\r\n      .x(function(d) { return x(d.Country) + (x.bandwidth() / 2) })\r\n      .y(function(d) { return y(d.Recovered) })\r\n    )\r\n    // Add the points\r\n\r\n    const rects2 = svg6.selectAll(\"circle\")\r\n    .data(outbreak3)\r\n\r\n    rects2.enter().append(\"circle\")\r\n      .attr(\"cx\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n      .attr(\"cy\", d => y(d.Recovered))\r\n      .attr(\"r\",5)\r\n      //.attr(\"width\",x.bandwidth)\r\n      //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n      //.attr(\"fill\", \"red\")\r\n      .attr(\"fill\",\"red\")\r\n      .on(\"mouseover\", function() {\r\n        //Do something on mouseover of any bar\r\n        d3.select(this)\r\n          .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n      })\r\n      .on(\"mouseout\", function(d) {\r\n        d3.select(this)\r\n          .attr(\"fill\", \"red\");\r\n      })\r\n      .append(\"title\")\r\n        .text(d=>`Number of Confirmed Cases : ${d.Recovered}  in ${d.Country}`);\r\n\r\n        \r\n  rects2.enter().append(\"text\")\r\n    .attr(\"class\", \"value\")\r\n    .attr(\"x\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n    .attr(\"y\", d => y(d.Recovered))\r\n    .attr(\"dy\", \".35em\") //vertical align middle\r\n    .attr(\"width\",x.bandwidth)\r\n    .attr(\"height\", d => HEIGHT - y(d.Recovered))\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .text(d=>\"No. \"+ d.Recovered)\r\n    .attr(\"font-family\" , \"sans-serif\")\r\n    .attr(\"font-size\" , \"10px\")\r\n    .attr(\"fill\" , \"white\")\r\n})// End Sars outbreak 3\r\n\r\n\r\n// Sars - outbreak4\r\nd3.json(sarsOutbreak).then(outbreak4=>{\r\n  //using max function, it will loop through the data and get the highest number of y value\r\n  const max2 = d3.max(outbreak4, d=> d.MortalityRate)\r\n  const min2 = d3.min(outbreak4, d=> d.MortalityRate) *0.55\r\n\r\n  const y = d3.scaleLinear()\r\n      .domain([min2, max2]) //highest y value\r\n      .range([HEIGHT3,0]) //minimum and maximum value \r\n\r\n  const x = d3.scaleBand()\r\n      .domain(outbreak4.map(d => d.Country))\r\n      .range([0,WIDTH3])  \r\n      .padding(0.2)\r\n\r\n  const xAxisCall2 = d3.axisBottom(x)\r\n  svg7.append(\"g\")\r\n   .attr(\"transform\",`translate(0, ${ HEIGHT3 })`)\r\n   .call(xAxisCall2)\r\n   .selectAll(\"text\")\r\n   .attr(\"y\", 0)\r\n   .attr(\"x\", 9)\r\n   .attr(\"dy\", \".35em\")\r\n   .attr(\"transform\", \"rotate(30)\")\r\n   .style(\"fill\",\"white\")\r\n   .style(\"font\", \"15px sans-serif\")\r\n   .style(\"text-anchor\", \"start\");\r\n\r\n\r\n  const yAxisCall2 = d3.axisLeft(y)\r\n  svg7.append(\"g\").call(yAxisCall2)\r\n\r\n  svg7.append(\"text\")\r\n    .attr(\"x\", WIDTH3/2)\r\n    .attr(\"y\", HEIGHT3 - 200)\r\n    .attr(\"text-anchor\",\"middle\")\r\n    .text(\"Sars-Mortality Rate (%) from main countries\")\r\n    .style(\"stroke\", \"yellow\")\r\n    .style(\"fill\",\"yellow\")\r\n    .style(\"stroke-width\", \".4px\")\r\n    .style(\"font\", \"15px sans-serif\");\r\n  \r\n  svg7.append(\"text\")\r\n    .attr(\"x\", WIDTH3/2)\r\n    .attr(\"y\", HEIGHT3 - 140)\r\n    .attr(\"text-anchor\",\"middle\")\r\n    .text(\"Mortality rates tend to be between 10% to 17% till 11 July; \")\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"fill\",\"white\")\r\n    .style(\"stroke-width\", \".4px\")\r\n    .style(\"font\", \"15px sans-serif\");\r\n\r\n  \r\n  svg7.append(\"text\")\r\n    .attr(\"x\", WIDTH3/2)\r\n    .attr(\"y\", HEIGHT3 - 120)\r\n    .attr(\"text-anchor\",\"middle\")\r\n    .text(\"the worst is around 17% in Hong Kong and Canada, \")\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"fill\",\"white\")\r\n    .style(\"stroke-width\", \".4px\")\r\n    .style(\"font\", \"15px sans-serif\");\r\n\r\n  svg7.append(\"text\")\r\n    .attr(\"x\", WIDTH3/2)\r\n    .attr(\"y\", HEIGHT3 - 100)\r\n    .attr(\"text-anchor\",\"middle\")\r\n    .text(\"yet China’s is only 6.6%. \")\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"fill\",\"white\")\r\n    .style(\"stroke-width\", \".4px\")\r\n    .style(\"font\", \"15px sans-serif\");\r\n\r\n  svg7.append(\"text\")\r\n    .attr(\"x\",-(HEIGHT3/2))\r\n    .attr(\"y\",-40)\r\n    .attr(\"text-anchor\",\"middle\")\r\n    .text(\"Mortality Rate (%)\")\r\n    .attr(\"transform\",\"rotate(-90)\")\r\n    .style(\"stroke\", \"white\")\r\n    .style(\"fill\",\"white\")\r\n    .style(\"stroke-width\", \".4px\")\r\n    .style(\"font\", \"15px sans-serif\");\r\n\r\n  // Add the line\r\n  svg7.append(\"path\")\r\n  .datum(outbreak4)\r\n  .attr(\"fill\", \"none\")\r\n  .attr(\"stroke\", \"yellow\")\r\n  .attr(\"stroke-width\", 1.5)\r\n  .attr(\"d\", d3.line()\r\n    .x(function(d) { return x(d.Country) + (x.bandwidth() / 2) })\r\n    .y(function(d) { return y(d.MortalityRate) })\r\n  )\r\n  // Add the points\r\n\r\n  const rects2 = svg7.selectAll(\"circle\")\r\n  .data(outbreak4)\r\n\r\n  rects2.enter().append(\"circle\")\r\n    .attr(\"cx\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n    .attr(\"cy\", d => y(d.MortalityRate))\r\n    .attr(\"r\",5)\r\n    //.attr(\"width\",x.bandwidth)\r\n    //.attr(\"height\", d => HEIGHT2 - y(d.Confirmed))\r\n    //.attr(\"fill\", \"red\")\r\n    .attr(\"fill\",\"red\")\r\n    .on(\"mouseover\", function() {\r\n      //Do something on mouseover of any bar\r\n      d3.select(this)\r\n        .attr(\"fill\", \"rgb(95, 109, 148)\");\r\n    })\r\n    .on(\"mouseout\", function(d) {\r\n      d3.select(this)\r\n        .attr(\"fill\", \"red\");\r\n    })\r\n    .append(\"title\")\r\n      .text(d=>`Number of Confirmed Cases : ${d.MortalityRate}  in ${d.Country}`);\r\n\r\n      \r\nrects2.enter().append(\"text\")\r\n  .attr(\"class\", \"value\")\r\n  .attr(\"x\", d=> x(d.Country)+ (x.bandwidth() / 2))\r\n  .attr(\"y\", d => y(d.MortalityRate))\r\n  .attr(\"dy\", \".35em\") //vertical align middle\r\n  .attr(\"width\",x.bandwidth)\r\n  .attr(\"height\", d => HEIGHT - y(d.MortalityRate))\r\n  .attr(\"text-anchor\", \"middle\")\r\n  .text(d=>d.MortalityRate + \" %\")\r\n  .attr(\"font-family\" , \"sans-serif\")\r\n  .attr(\"font-size\" , \"10px\")\r\n  .attr(\"fill\" , \"white\")\r\n})// End Sars outbreak 4\r\n\r\n\r\n\r\n          Promise.all([\r\n            d3.json(\"https://merssummary-default-rtdb.firebaseio.com/Names.json\"),\r\n            d3.json(\"https://sarssummary-default-rtdb.firebaseio.com/Sars.json\")\r\n          ]).then((datasets)=>{\r\n\r\n            vis.MersData=datasets[0]\r\n            vis.SarsData=datasets[1]\r\n            console.log(vis.MersData)\r\n            console.log(vis.SarsData)\r\n            vis.update(\"mers\")\r\n            \r\n        })\r\n    }\r\n\r\n    // This update() method gets called you change your data.\r\n    update(virus){\r\n      const vis = this;\r\n\r\n      vis.data = (virus === \"mers\") ? vis.MersData : vis.SarsData;\r\n      vis.xLabel.text(` ${virus}`)  \r\n      \r\n      //using max function, it will loop through the data and get the highest number of y value.\r\n      const max = d3.max(vis.data, d=> d.Number)\r\n      const min = d3.min(vis.data, d=> d.Number) *0.55\r\n\r\n      const y = d3.scaleLinear()\r\n          .domain([min, max]) //highest y value.\r\n          .range([HEIGHT,0]) //minimum and maximum value .\r\n\r\n      const x = d3.scaleBand()\r\n          .domain(vis.data.map(d => d.Year))\r\n          .range([0,WIDTH])  \r\n          .padding(0.2)\r\n\r\n      const xAxisCall = d3.axisBottom(x)\r\n        vis.xAxisGroup.transition().duration(500).call(xAxisCall)\r\n        .selectAll(\"text\")\r\n             .attr(\"y\", 0)\r\n             .attr(\"x\", 9)\r\n             .attr(\"dy\", \".35em\")\r\n             .attr(\"transform\", \"rotate(70)\")\r\n             .style(\"fill\",\"white\")\r\n             .style(\"font\", \"10px sans-serif\")\r\n             .style(\"text-anchor\", \"start\");\r\n\r\n      const yAxisCall = d3.axisLeft(y)\r\n       vis.yAxisGroup.transition().duration(500).call(yAxisCall)\r\n\r\n      // DATA JOIN\r\n      const rects = vis.svg.selectAll(\"rect\")\r\n            .data(vis.data)\r\n\r\n      // EXIT\r\n      rects.exit()\r\n        .transition().duration(500)\r\n          .attr(\"height\", 0)\r\n          .attr(\"y\", HEIGHT)\r\n          .remove()\r\n\r\n      // UPDATE\r\n      rects.transition().duration(500)\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"y\", d => y(d.Number))\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n\r\n\r\n      // ENTER\r\n      rects.enter().append(\"rect\")\r\n        .attr(\"x\", d => x(d.Year))\r\n        .attr(\"width\", x.bandwidth)\r\n        //.attr(\"fill\", \"#69b3a2\")\r\n        .attr(\"y\",HEIGHT)\r\n        .transition().duration(500)\r\n        .attr(\"height\", d => HEIGHT-y(d.Number))\r\n        .attr(\"y\", d => y(d.Number))\r\n        .style(\"padding\", \"3px\")\r\n        .style(\"margin\", \"1px\")\r\n        .style(\"width\", d => `${d * 10}px`)\r\n        .text(d => d)\r\n        //.attr(\"fill\", \"#008080\")\r\n        .attr(\"fill\", d=>{\r\n          if(d.Number > 300){\r\n              return \"red\";\r\n          }\r\n          return \"#008080\";\r\n        })\r\n        .attr(\"stroke\", \"#FFB9EC\")\r\n        .attr(\"stroke-width\", 1.5)\r\n\r\n      rects.enter().append(\"text\")\r\n        .attr(\"class\", \"value\")\r\n        .attr(\"x\", d=> x(d.Year) + (x.bandwidth() / 2))\r\n        .attr(\"y\", d => y(d.Number))\r\n        .attr(\"dx\", -5)\r\n        .attr(\"dy\", \".35em\") //vertical align middle\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(d=>\"No. \"+d.Number)\r\n        .attr(\"fill\" , \"white\")\r\n        .style(\"font\", \"15px sans-serif\");\r\n    }\r\n}",{"ruleId":"124","severity":1,"message":"125","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":13},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":1,"column":16,"nodeType":"126","messageId":"127","endLine":1,"endColumn":24},{"ruleId":"124","severity":1,"message":"133","line":39,"column":7,"nodeType":"126","messageId":"127","endLine":39,"endColumn":9},{"ruleId":"124","severity":1,"message":"134","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":122,"column":17,"nodeType":"137","endLine":122,"endColumn":65},{"ruleId":"124","severity":1,"message":"138","line":129,"column":11,"nodeType":"126","messageId":"127","endLine":129,"endColumn":20},{"ruleId":"124","severity":1,"message":"139","line":156,"column":9,"nodeType":"126","messageId":"127","endLine":156,"endColumn":16},{"ruleId":"124","severity":1,"message":"140","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":1,"column":1,"nodeType":"143","endLine":1,"endColumn":27},{"ruleId":"141","severity":1,"message":"142","line":17,"column":1,"nodeType":"143","endLine":22,"endColumn":2},{"ruleId":"144","severity":1,"message":"145","line":103,"column":23,"nodeType":"146","messageId":"147","endLine":103,"endColumn":25},{"ruleId":"124","severity":1,"message":"148","line":107,"column":15,"nodeType":"126","messageId":"127","endLine":107,"endColumn":19},{"ruleId":"124","severity":1,"message":"149","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":13},{"ruleId":"124","severity":1,"message":"150","line":4,"column":7,"nodeType":"126","messageId":"127","endLine":4,"endColumn":10},{"ruleId":"124","severity":1,"message":"148","line":5,"column":7,"nodeType":"126","messageId":"127","endLine":5,"endColumn":11},{"ruleId":"124","severity":1,"message":"151","line":20,"column":17,"nodeType":"126","messageId":"127","endLine":20,"endColumn":21},{"ruleId":"124","severity":1,"message":"149","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":13},{"ruleId":"124","severity":1,"message":"152","line":14,"column":7,"nodeType":"126","messageId":"127","endLine":14,"endColumn":11},{"ruleId":"124","severity":1,"message":"153","line":15,"column":7,"nodeType":"126","messageId":"127","endLine":15,"endColumn":11},{"ruleId":"124","severity":1,"message":"154","line":16,"column":7,"nodeType":"126","messageId":"127","endLine":16,"endColumn":11},{"ruleId":"124","severity":1,"message":"149","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":13},{"ruleId":"124","severity":1,"message":"155","line":4,"column":7,"nodeType":"126","messageId":"127","endLine":4,"endColumn":10},{"ruleId":"124","severity":1,"message":"152","line":5,"column":7,"nodeType":"126","messageId":"127","endLine":5,"endColumn":11},{"ruleId":"124","severity":1,"message":"156","line":61,"column":15,"nodeType":"126","messageId":"127","endLine":61,"endColumn":20},{"ruleId":"124","severity":1,"message":"157","line":75,"column":15,"nodeType":"126","messageId":"127","endLine":75,"endColumn":20},"no-unused-vars","'Fbase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'useState' is defined but never used.","'H1' is assigned a value but never used.","'CardColumns' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'countries' is assigned a value but never used.","'queries' is assigned a value but never used.","'Dropdown' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","'svg' is defined but never used.","'pie' is assigned a value but never used.","'svgg' is assigned a value but never used.","'url2' is assigned a value but never used.","'url3' is assigned a value but never used.","'url4' is assigned a value but never used.","'url' is assigned a value but never used.","'tsvg2' is assigned a value but never used.","'tsvg3' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]